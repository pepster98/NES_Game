;
; File generated by cc65 v 2.15 - Git f7cdfbf
;
	.fopt		compiler,"cc65 v 2.15 - Git f7cdfbf"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_memcpy
	.import		_Shuffle_Sprites
	.import		_Sprite_Zero
	.import		_Reset
	.import		_Blank_sprite3
	.import		_Play_Fx
	.import		_Reset_Music
	.import		_Play_Music
	.import		_Music_Update
	.import		_Wait_Vblank
	.import		_UnRLE
	.import		_Get_Input
	.export		_NMI_flag
	.export		_Frame_Count
	.export		_index
	.export		_index4
	.export		_X1
	.export		_X1old
	.export		_Y1
	.export		_joypad1
	.export		_joypad1old
	.export		_joypad1test
	.export		_joypad2
	.export		_joypad2old
	.export		_joypad2test
	.export		_BGD_address
	.export		_Vert_scroll
	.export		_Vert_scroll2
	.export		_X_speed
	.export		_Y_speed
	.export		_collision
	.export		_collision2
	.export		_temp
	.export		_temp2
	.export		_song
	.export		_Game_Mode
	.export		_Wait
	.export		_Wait2
	.export		_Score1
	.export		_Score2
	.export		_Score3
	.export		_Lives
	.export		_Bullet1x
	.export		_Bullet1y
	.export		_Bullet2x
	.export		_Bullet2y
	.export		_Bullet3x
	.export		_Bullet3y
	.export		_Bullet4x
	.export		_Bullet4y
	.export		_Bullet5x
	.export		_Bullet5y
	.export		_Bullet6x
	.export		_Bullet6y
	.export		_Bullet7x
	.export		_Bullet7y
	.export		_shuffle
	.export		_bullet_Wait
	.export		_Enemy1_Type
	.export		_Enemy1x
	.export		_Enemy1y
	.export		_Enemy2_Type
	.export		_Enemy2x
	.export		_Enemy2y
	.export		_Enemy3_Type
	.export		_Enemy3x
	.export		_Enemy3y
	.export		_Enemy4_Type
	.export		_Enemy4x
	.export		_Enemy4y
	.export		_Tile_Number
	.export		_objectAx
	.export		_objectAy
	.export		_sizeAx
	.export		_sizeAy
	.export		_objectBx
	.export		_objectBy
	.export		_sizeBx
	.export		_sizeBy
	.export		_objectA_right
	.export		_objectB_right
	.export		_objectA_bottom
	.export		_objectB_bottom
	.export		_injury_Timer
	.export		_Death_Flag
	.export		_Victory_Flag
	.export		_Master_Clock
	.export		_Spawn_Index
	.export		_Boss_Health
	.export		_Boss_Move
	.export		_Boss_Count
	.export		_BossX
	.export		_Boss_Laser_1x
	.export		_Boss_Laser_1y
	.export		_Boss_Laser_2x
	.export		_Boss_Laser_2y
	.export		_Boss_Laser_3x
	.export		_Boss_Laser_3y
	.export		_Boss_Laser_4x
	.export		_Boss_Laser_4y
	.export		_SFx_Wait
	.export		_FILLER
	.export		_SPRITE_BULLET
	.export		_SPRITE_ENEMY
	.export		_SPRITE_BULLET_E
	.export		_SPRITE_ZERO
	.export		_SPRITE_TEXT
	.export		_SPRITE_SHIP
	.export		_SPRITES2
	.export		_Title
	.export		_Stars
	.export		_PALETTE
	.export		_MetaSprite_Y
	.export		_MetaSprite_Tile
	.export		_MetaSprite_X
	.export		_HUD
	.export		_HUD2
	.export		_Enemy_Tiles
	.export		_Spawn_Timing
	.export		_Spawn_Array
	.export		_All_Off
	.export		_All_On
	.export		_Reset_Scroll
	.export		_Load_Palette
	.export		_every_frame
	.export		_every_frame2
	.export		_update_Sprites
	.export		_move_logic
	.export		_Draw_Title
	.export		_Draw_Background
	.export		_Turn_On_Pause_Sprites
	.export		_Turn_On_Game_Over_Sprites
	.export		_Turn_On_Victory_Sprites
	.export		_Set_Sprite_Zero
	.export		_All_Collisions
	.export		_Check_Each_Bullet
	.export		_collision_Test
	.export		_Adjust_Score
	.export		_Spawn_Enemies
	.export		_Boss_Start_Sprites
	.export		_Boss_Init
	.export		_Shuffle_Sprites2
	.export		_Boss_Moves
	.export		_collision_Boss
	.export		_Restore_Boss_Y
	.export		_main

.segment	"RODATA"

_Title:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$E7
	.byte	$90
	.byte	$91
	.byte	$92
	.byte	$93
	.byte	$94
	.byte	$95
	.byte	$96
	.byte	$97
	.byte	$98
	.byte	$99
	.byte	$9A
	.byte	$9B
	.byte	$9C
	.byte	$9D
	.byte	$9E
	.byte	$9F
	.byte	$9F
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$A0
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$A5
	.byte	$A6
	.byte	$A7
	.byte	$A8
	.byte	$A9
	.byte	$AA
	.byte	$AB
	.byte	$AC
	.byte	$AD
	.byte	$AE
	.byte	$AF
	.byte	$AF
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$B0
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$B8
	.byte	$B9
	.byte	$BA
	.byte	$BB
	.byte	$BC
	.byte	$BD
	.byte	$BE
	.byte	$BF
	.byte	$BF
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$C0
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$C4
	.byte	$C5
	.byte	$C6
	.byte	$C7
	.byte	$C8
	.byte	$C9
	.byte	$CA
	.byte	$CB
	.byte	$CC
	.byte	$CD
	.byte	$CE
	.byte	$CF
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$D0
	.byte	$D1
	.byte	$D2
	.byte	$D3
	.byte	$D4
	.byte	$D5
	.byte	$D6
	.byte	$D7
	.byte	$D8
	.byte	$D9
	.byte	$DA
	.byte	$DB
	.byte	$DC
	.byte	$DD
	.byte	$DE
	.byte	$DF
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$E0
	.byte	$E1
	.byte	$E2
	.byte	$E3
	.byte	$E4
	.byte	$E5
	.byte	$E6
	.byte	$E7
	.byte	$E8
	.byte	$E9
	.byte	$EA
	.byte	$EB
	.byte	$EC
	.byte	$ED
	.byte	$EE
	.byte	$EF
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$F0
	.byte	$F1
	.byte	$F2
	.byte	$F3
	.byte	$F4
	.byte	$F5
	.byte	$F6
	.byte	$F7
	.byte	$F8
	.byte	$F9
	.byte	$FA
	.byte	$FB
	.byte	$FC
	.byte	$FD
	.byte	$FE
	.byte	$FF
	.byte	$00
	.byte	$01
	.byte	$91
	.byte	$50
	.byte	$72
	.byte	$65
	.byte	$73
	.byte	$73
	.byte	$00
	.byte	$00
	.byte	$53
	.byte	$74
	.byte	$61
	.byte	$72
	.byte	$74
	.byte	$00
	.byte	$01
	.byte	$F0
	.byte	$20
	.byte	$32
	.byte	$30
	.byte	$31
	.byte	$35
	.byte	$00
	.byte	$44
	.byte	$6F
	.byte	$75
	.byte	$67
	.byte	$00
	.byte	$46
	.byte	$72
	.byte	$61
	.byte	$6B
	.byte	$65
	.byte	$72
	.byte	$00
	.byte	$01
	.byte	$67
	.byte	$01
	.byte	$00
_Stars:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$09
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$2A
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$24
	.byte	$05
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$23
	.byte	$04
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$29
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$27
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$25
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$2F
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$0B
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$0E
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$26
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$34
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$0C
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$25
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$0D
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$46
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$0A
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$17
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$07
	.byte	$00
	.byte	$01
	.byte	$39
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$05
	.byte	$00
	.byte	$01
	.byte	$04
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$0F
	.byte	$04
	.byte	$00
	.byte	$01
	.byte	$32
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$16
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$11
	.byte	$08
	.byte	$01
	.byte	$00
_PALETTE:
	.byte	$0F
	.byte	$02
	.byte	$13
	.byte	$24
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$20
	.byte	$0F
	.byte	$01
	.byte	$28
	.byte	$22
	.byte	$00
	.byte	$18
	.byte	$1B
	.byte	$38
	.byte	$00
	.byte	$02
	.byte	$13
	.byte	$33
	.byte	$00
	.byte	$17
	.byte	$1A
	.byte	$39
_MetaSprite_Y:
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$10
	.byte	$10
_MetaSprite_Tile:
	.byte	$00
	.byte	$01
	.byte	$10
	.byte	$11
	.byte	$02
	.byte	$03
_MetaSprite_X:
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$08
_HUD:
	.byte	$53,$43,$4F,$52,$45,$3A,$00
_HUD2:
	.byte	$4C,$49,$56,$45,$53,$3A,$00
_Enemy_Tiles:
	.byte	$04
	.byte	$05
	.byte	$14
	.byte	$15
	.byte	$06
	.byte	$07
	.byte	$16
	.byte	$17
_Spawn_Timing:
	.byte	$02
	.byte	$06
	.byte	$09
	.byte	$0C
	.byte	$0F
	.byte	$12
	.byte	$15
	.byte	$18
	.byte	$1B
	.byte	$1E
	.byte	$21
	.byte	$24
	.byte	$27
	.byte	$2A
	.byte	$2D
	.byte	$30
	.byte	$33
	.byte	$36
	.byte	$39
	.byte	$3C
	.byte	$3F
	.byte	$42
	.byte	$44
	.byte	$46
	.byte	$48
	.byte	$4A
	.byte	$4C
	.byte	$4E
	.byte	$50
	.byte	$52
	.byte	$54
	.byte	$56
	.byte	$58
	.byte	$5A
	.byte	$5C
	.byte	$5E
	.byte	$60
	.byte	$62
	.byte	$64
	.byte	$66
	.byte	$68
	.byte	$6A
	.byte	$6C
	.byte	$6E
	.byte	$FF
_Spawn_Array:
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$04
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$01
	.byte	$02
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$05
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$04
	.byte	$03
	.byte	$01
	.byte	$04
	.byte	$05
	.byte	$04
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$01
	.byte	$05
	.byte	$03
	.byte	$01
	.byte	$02
	.byte	$05
	.byte	$05
	.byte	$04
	.byte	$03
_Boss_Start_Sprites:
	.byte	$28
	.byte	$A0
	.byte	$02
	.byte	$40
	.byte	$28
	.byte	$A1
	.byte	$02
	.byte	$48
	.byte	$28
	.byte	$A2
	.byte	$02
	.byte	$50
	.byte	$28
	.byte	$A3
	.byte	$02
	.byte	$58
	.byte	$28
	.byte	$A4
	.byte	$02
	.byte	$60
	.byte	$28
	.byte	$A5
	.byte	$02
	.byte	$68
	.byte	$30
	.byte	$B0
	.byte	$02
	.byte	$40
	.byte	$30
	.byte	$B1
	.byte	$02
	.byte	$48
	.byte	$30
	.byte	$B2
	.byte	$02
	.byte	$50
	.byte	$30
	.byte	$B3
	.byte	$02
	.byte	$58
	.byte	$30
	.byte	$B4
	.byte	$02
	.byte	$60
	.byte	$30
	.byte	$B5
	.byte	$02
	.byte	$68
	.byte	$38
	.byte	$C0
	.byte	$02
	.byte	$40
	.byte	$38
	.byte	$C1
	.byte	$02
	.byte	$48
	.byte	$38
	.byte	$C2
	.byte	$02
	.byte	$50
	.byte	$38
	.byte	$C3
	.byte	$02
	.byte	$58
	.byte	$38
	.byte	$C4
	.byte	$02
	.byte	$60
	.byte	$38
	.byte	$C5
	.byte	$02
	.byte	$68
	.byte	$40
	.byte	$D0
	.byte	$02
	.byte	$40
	.byte	$40
	.byte	$D1
	.byte	$02
	.byte	$48
	.byte	$40
	.byte	$D2
	.byte	$02
	.byte	$50
	.byte	$40
	.byte	$D3
	.byte	$02
	.byte	$58
	.byte	$40
	.byte	$D4
	.byte	$02
	.byte	$60
	.byte	$40
	.byte	$D5
	.byte	$02
	.byte	$68
	.byte	$48
	.byte	$E0
	.byte	$02
	.byte	$40
	.byte	$48
	.byte	$E1
	.byte	$02
	.byte	$48
	.byte	$48
	.byte	$E2
	.byte	$02
	.byte	$50
	.byte	$48
	.byte	$E3
	.byte	$02
	.byte	$58
	.byte	$48
	.byte	$E4
	.byte	$02
	.byte	$60
	.byte	$48
	.byte	$E5
	.byte	$02
	.byte	$68

.segment	"BSS"

.segment	"ZEROPAGE"
_NMI_flag:
	.res	1,$00
_Frame_Count:
	.res	1,$00
_index:
	.res	1,$00
_index4:
	.res	1,$00
_X1:
	.res	1,$00
_X1old:
	.res	1,$00
_Y1:
	.res	1,$00
_joypad1:
	.res	1,$00
_joypad1old:
	.res	1,$00
_joypad1test:
	.res	1,$00
_joypad2:
	.res	1,$00
_joypad2old:
	.res	1,$00
_joypad2test:
	.res	1,$00
_BGD_address:
	.res	2,$00
_Vert_scroll:
	.res	1,$00
_Vert_scroll2:
	.res	1,$00
_X_speed:
	.res	1,$00
_Y_speed:
	.res	1,$00
_collision:
	.res	1,$00
_collision2:
	.res	1,$00
_temp:
	.res	1,$00
_temp2:
	.res	1,$00
_song:
	.res	1,$00
_Game_Mode:
	.res	1,$00
_Wait:
	.res	1,$00
_Wait2:
	.res	1,$00
_Score1:
	.res	1,$00
_Score2:
	.res	1,$00
_Score3:
	.res	1,$00
_Lives:
	.res	1,$00
_Bullet1x:
	.res	1,$00
_Bullet1y:
	.res	1,$00
_Bullet2x:
	.res	1,$00
_Bullet2y:
	.res	1,$00
_Bullet3x:
	.res	1,$00
_Bullet3y:
	.res	1,$00
_Bullet4x:
	.res	1,$00
_Bullet4y:
	.res	1,$00
_Bullet5x:
	.res	1,$00
_Bullet5y:
	.res	1,$00
_Bullet6x:
	.res	1,$00
_Bullet6y:
	.res	1,$00
_Bullet7x:
	.res	1,$00
_Bullet7y:
	.res	1,$00
_shuffle:
	.res	1,$00
_bullet_Wait:
	.res	1,$00
_Enemy1_Type:
	.res	1,$00
_Enemy1x:
	.res	1,$00
_Enemy1y:
	.res	1,$00
_Enemy2_Type:
	.res	1,$00
_Enemy2x:
	.res	1,$00
_Enemy2y:
	.res	1,$00
_Enemy3_Type:
	.res	1,$00
_Enemy3x:
	.res	1,$00
_Enemy3y:
	.res	1,$00
_Enemy4_Type:
	.res	1,$00
_Enemy4x:
	.res	1,$00
_Enemy4y:
	.res	1,$00
_Tile_Number:
	.res	1,$00
_objectAx:
	.res	1,$00
_objectAy:
	.res	1,$00
_sizeAx:
	.res	1,$00
_sizeAy:
	.res	1,$00
_objectBx:
	.res	1,$00
_objectBy:
	.res	1,$00
_sizeBx:
	.res	1,$00
_sizeBy:
	.res	1,$00
_objectA_right:
	.res	1,$00
_objectB_right:
	.res	1,$00
_objectA_bottom:
	.res	1,$00
_objectB_bottom:
	.res	1,$00
_injury_Timer:
	.res	1,$00
_Death_Flag:
	.res	1,$00
_Victory_Flag:
	.res	1,$00
_Master_Clock:
	.res	1,$00
_Spawn_Index:
	.res	1,$00
_Boss_Health:
	.res	1,$00
_Boss_Move:
	.res	1,$00
_Boss_Count:
	.res	1,$00
_BossX:
	.res	1,$00
_Boss_Laser_1x:
	.res	1,$00
_Boss_Laser_1y:
	.res	1,$00
_Boss_Laser_2x:
	.res	1,$00
_Boss_Laser_2y:
	.res	1,$00
_Boss_Laser_3x:
	.res	1,$00
_Boss_Laser_3y:
	.res	1,$00
_Boss_Laser_4x:
	.res	1,$00
_Boss_Laser_4y:
	.res	1,$00
_SFx_Wait:
	.res	1,$00
.segment	"OAM"
_FILLER:
	.res	64,$00
_SPRITE_BULLET:
	.res	64,$00
_SPRITE_ENEMY:
	.res	64,$00
_SPRITE_BULLET_E:
	.res	64,$00
_SPRITE_ZERO:
	.res	4,$00
_SPRITE_TEXT:
	.res	28,$00
_SPRITE_SHIP:
	.res	32,$00
_SPRITES2:
	.res	192,$00

; ---------------------------------------------------------------
; void __near__ All_Off (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_All_Off: near

.segment	"CODE"

;
; PPU_CTRL = 0;
;
	lda     #$00
	sta     $2000
;
; PPU_MASK = 0; 
;
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ All_On (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_All_On: near

.segment	"CODE"

;
; PPU_CTRL = 0x90; //screen is on, NMI on
;
	lda     #$90
	sta     $2000
;
; PPU_MASK = 0x1e; 
;
	lda     #$1E
	sta     $2001
;
; }  
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Reset_Scroll (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Reset_Scroll: near

.segment	"CODE"

;
; PPU_ADDRESS = 0;
;
	lda     #$00
	sta     $2006
;
; PPU_ADDRESS = 0;
;
	sta     $2006
;
; SCROLL = 0;
;
	sta     $2005
;
; SCROLL = 0;
;
	sta     $2005
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Load_Palette (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Load_Palette: near

.segment	"CODE"

;
; PPU_ADDRESS = 0x3f;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; for( index = 0; index < sizeof(PALETTE); ++index ){
;
	sta     _index
L0C23:	lda     _index
	cmp     #$20
	bcs     L0216
;
; PPU_DATA = PALETTE[index];
;
	ldy     _index
	lda     _PALETTE,y
	sta     $2007
;
; for( index = 0; index < sizeof(PALETTE); ++index ){
;
	inc     _index
	jmp     L0C23
;
; }
;
L0216:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ every_frame (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_every_frame: near

.segment	"CODE"

;
; OAM_ADDRESS = 0;
;
	lda     #$00
	sta     $2003
;
; OAM_DMA = 3; //push all the sprite data from the ram at 300-3ff to the sprite memory ##changed
;
	lda     #$03
	sta     $4014
;
; SCROLL = 0;
;
	lda     #$00
	sta     $2005
;
; SCROLL = 0; //setting the new scroll position
;
	sta     $2005
;
; PPU_CTRL = 0x90; //screen is on, NMI on
;
	lda     #$90
	sta     $2000
;
; PPU_MASK = 0x1e; 
;
	lda     #$1E
	sta     $2001
;
; Get_Input();
;
	jmp     _Get_Input

.endproc

; ---------------------------------------------------------------
; void __near__ every_frame2 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_every_frame2: near

.segment	"CODE"

;
; PPU_ADDRESS = 0x24;
;
	lda     #$24
	sta     $2006
;
; PPU_ADDRESS = 0x6a;
;
	lda     #$6A
	sta     $2006
;
; PPU_DATA = Score1+0x30;
;
	lda     _Score1
	clc
	adc     #$30
	sta     $2007
;
; PPU_DATA = Score2+0x30;
;
	lda     _Score2
	clc
	adc     #$30
	sta     $2007
;
; PPU_DATA = Score3+0x30;
;
	lda     _Score3
	clc
	adc     #$30
	sta     $2007
;
; PPU_DATA = 0x30; //dummy score, last 3 always zero 
;
	lda     #$30
	sta     $2007
;
; PPU_DATA = 0x30;
;
	sta     $2007
;
; PPU_DATA = 0x30;
;
	sta     $2007
;
; PPU_ADDRESS = 0x24;
;
	lda     #$24
	sta     $2006
;
; PPU_ADDRESS = 0x7a;
;
	lda     #$7A
	sta     $2006
;
; PPU_DATA = Lives+0x30;
;
	lda     _Lives
	clc
	adc     #$30
	sta     $2007
;
; OAM_ADDRESS = 0;
;
	lda     #$00
	sta     $2003
;
; OAM_DMA = 3; //push all the sprite data from the ram at 300-3ff to the sprite memory
;
	lda     #$03
	sta     $4014
;
; SCROLL = 0;
;
	lda     #$00
	sta     $2005
;
; SCROLL = 0; //setting the new scroll position
;
	sta     $2005
;
; PPU_CTRL = 0x91; //screen is on, NMI on, show the HUD at the top of the screen
;
	lda     #$91
	sta     $2000
;
; PPU_MASK = 0x1e; 
;
	lda     #$1E
	sta     $2001
;
; Get_Input();
;
	jmp     _Get_Input

.endproc

; ---------------------------------------------------------------
; void __near__ update_Sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_update_Sprites: near

.segment	"CODE"

;
; index4 = 0;
;
	lda     #$00
	sta     _index4
;
; for (index = 0; index < 6; ++index ){
;
	sta     _index
L0C32:	lda     _index
	cmp     #$06
	bcs     L0C33
;
; SPRITE_SHIP[index4] = MetaSprite_Y[index] + Y1; //relative y + master y
;
	lda     #<(_SPRITE_SHIP)
	ldx     #>(_SPRITE_SHIP)
	clc
	adc     _index4
	bcc     L027D
	inx
L027D:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_Y,y
	clc
	adc     _Y1
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITE_SHIP[index4] = MetaSprite_Tile[index]; //tile numbers
;
	lda     #<(_SPRITE_SHIP)
	ldx     #>(_SPRITE_SHIP)
	clc
	adc     _index4
	bcc     L0284
	inx
L0284:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_Tile,y
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITE_SHIP[index4] = 0; //attributes, all zero here
;
	ldy     _index4
	lda     #$00
	sta     _SPRITE_SHIP,y
;
; ++index4;
;
	inc     _index4
;
; SPRITE_SHIP[index4] = MetaSprite_X[index] + X1; //relative x + master x
;
	lda     #<(_SPRITE_SHIP)
	ldx     #>(_SPRITE_SHIP)
	clc
	adc     _index4
	bcc     L0290
	inx
L0290:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_X,y
	clc
	adc     _X1
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; for (index = 0; index < 6; ++index ){
;
	inc     _index
	jmp     L0C32
;
; if (injury_Timer > 0 && injury_Timer <= 0x1c){ //explosion tiles
;
L0C33:	lda     _injury_Timer
	beq     L0C37
	cmp     #$1D
	bcs     L0C37
;
; SPRITE_SHIP[1] = 0x20;
;
	lda     #$20
	sta     _SPRITE_SHIP+1
;
; SPRITE_SHIP[5] = 0x20;
;
	sta     _SPRITE_SHIP+5
;
; SPRITE_SHIP[9] = 0x20;
;
	sta     _SPRITE_SHIP+9
;
; SPRITE_SHIP[13] = 0x20;
;
	sta     _SPRITE_SHIP+13
;
; SPRITE_SHIP[17] = 0x20;
;
	sta     _SPRITE_SHIP+17
;
; SPRITE_SHIP[21] = 0x20;
;
	sta     _SPRITE_SHIP+21
;
; if (injury_Timer > 0x1c && injury_Timer <= 0x28){
;
L0C37:	lda     _injury_Timer
	cmp     #$1D
	bcc     L0C3B
	cmp     #$29
	bcs     L0C3B
;
; SPRITE_SHIP[1] = 0x0c;
;
	lda     #$0C
	sta     _SPRITE_SHIP+1
;
; SPRITE_SHIP[5] = 0x0d;
;
	lda     #$0D
	sta     _SPRITE_SHIP+5
;
; SPRITE_SHIP[9] = 0x1c;
;
	lda     #$1C
	sta     _SPRITE_SHIP+9
;
; SPRITE_SHIP[13] = 0x1d;
;
	lda     #$1D
	sta     _SPRITE_SHIP+13
;
; if (injury_Timer > 0x28 && injury_Timer <= 0x34){
;
L0C3B:	lda     _injury_Timer
	cmp     #$29
	bcc     L0C3F
	cmp     #$35
	bcs     L0C3F
;
; SPRITE_SHIP[1] = 0x0a;
;
	lda     #$0A
	sta     _SPRITE_SHIP+1
;
; SPRITE_SHIP[5] = 0x0b;
;
	lda     #$0B
	sta     _SPRITE_SHIP+5
;
; SPRITE_SHIP[9] = 0x1a;
;
	lda     #$1A
	sta     _SPRITE_SHIP+9
;
; SPRITE_SHIP[13] = 0x1b;
;
	lda     #$1B
	sta     _SPRITE_SHIP+13
;
; if (injury_Timer > 0x34){
;
L0C3F:	lda     _injury_Timer
	cmp     #$35
	bcc     L0C40
;
; SPRITE_SHIP[1] = 0x08;
;
	lda     #$08
	sta     _SPRITE_SHIP+1
;
; SPRITE_SHIP[5] = 0x09;
;
	lda     #$09
	sta     _SPRITE_SHIP+5
;
; SPRITE_SHIP[9] = 0x18;
;
	lda     #$18
	sta     _SPRITE_SHIP+9
;
; SPRITE_SHIP[13] = 0x19;
;
	lda     #$19
	sta     _SPRITE_SHIP+13
;
; if (injury_Timer != 0)
;
L0C40:	lda     _injury_Timer
	beq     L0C42
;
; --injury_Timer;
;
	dec     _injury_Timer
;
; index4 = 0;
;
	lda     #$00
L0C42:	sta     _index4
;
; if (Enemy1_Type != 0){
;
	lda     _Enemy1_Type
	jeq     L0C44
;
; Tile_Number = (Enemy1_Type - 1) << 2; //type of ship
;
	sec
	sbc     #$01
	asl     a
	asl     a
	sta     _Tile_Number
;
; for (index = 0; index < 4; ++index){
;
	lda     #$00
	sta     _index
L0C43:	lda     _index
	cmp     #$04
	jcs     L0C44
;
; SPRITE_ENEMY[index4] = MetaSprite_Y[index] + Enemy1y;
;
	lda     #<(_SPRITE_ENEMY)
	ldx     #>(_SPRITE_ENEMY)
	clc
	adc     _index4
	bcc     L02EE
	inx
L02EE:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_Y,y
	clc
	adc     _Enemy1y
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITE_ENEMY[index4] = Enemy_Tiles[index + Tile_Number];
;
	lda     #<(_SPRITE_ENEMY)
	ldx     #>(_SPRITE_ENEMY)
	clc
	adc     _index4
	bcc     L02F5
	inx
L02F5:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _index
	clc
	adc     _Tile_Number
	bcc     L0C27
	inx
L0C27:	sta     ptr1
	txa
	clc
	adc     #>(_Enemy_Tiles)
	sta     ptr1+1
	ldy     #<(_Enemy_Tiles)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; ++index4;
;
	inc     _index4
;
; SPRITE_ENEMY[index4] = Enemy1_Type; //attributes, change later
;
	ldy     _index4
	lda     _Enemy1_Type
	sta     _SPRITE_ENEMY,y
;
; ++index4;
;
	inc     _index4
;
; SPRITE_ENEMY[index4] = MetaSprite_X[index] + Enemy1x;
;
	lda     #<(_SPRITE_ENEMY)
	ldx     #>(_SPRITE_ENEMY)
	clc
	adc     _index4
	bcc     L0300
	inx
L0300:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_X,y
	clc
	adc     _Enemy1x
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; for (index = 0; index < 4; ++index){
;
	inc     _index
	jmp     L0C43
;
; if (Enemy2_Type != 0){
;
L0C44:	lda     _Enemy2_Type
	jeq     L0C46
;
; Tile_Number = (Enemy2_Type - 1) << 2; //type of ship
;
	sec
	sbc     #$01
	asl     a
	asl     a
	sta     _Tile_Number
;
; for (index = 0; index < 4; ++index){
;
	lda     #$00
	sta     _index
L0C45:	lda     _index
	cmp     #$04
	jcs     L0C46
;
; SPRITE_ENEMY[index4] = MetaSprite_Y[index] + Enemy2y;
;
	lda     #<(_SPRITE_ENEMY)
	ldx     #>(_SPRITE_ENEMY)
	clc
	adc     _index4
	bcc     L0315
	inx
L0315:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_Y,y
	clc
	adc     _Enemy2y
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITE_ENEMY[index4] = Enemy_Tiles[index + Tile_Number];
;
	lda     #<(_SPRITE_ENEMY)
	ldx     #>(_SPRITE_ENEMY)
	clc
	adc     _index4
	bcc     L031C
	inx
L031C:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _index
	clc
	adc     _Tile_Number
	bcc     L0C2A
	inx
L0C2A:	sta     ptr1
	txa
	clc
	adc     #>(_Enemy_Tiles)
	sta     ptr1+1
	ldy     #<(_Enemy_Tiles)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; ++index4;
;
	inc     _index4
;
; SPRITE_ENEMY[index4] = Enemy2_Type; //attributes, change later
;
	ldy     _index4
	lda     _Enemy2_Type
	sta     _SPRITE_ENEMY,y
;
; ++index4;
;
	inc     _index4
;
; SPRITE_ENEMY[index4] = MetaSprite_X[index] + Enemy2x;
;
	lda     #<(_SPRITE_ENEMY)
	ldx     #>(_SPRITE_ENEMY)
	clc
	adc     _index4
	bcc     L0327
	inx
L0327:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_X,y
	clc
	adc     _Enemy2x
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; for (index = 0; index < 4; ++index){
;
	inc     _index
	jmp     L0C45
;
; if (Enemy3_Type != 0){
;
L0C46:	lda     _Enemy3_Type
	jeq     L0C48
;
; Tile_Number = (Enemy3_Type - 1) << 2; //type of ship
;
	sec
	sbc     #$01
	asl     a
	asl     a
	sta     _Tile_Number
;
; for (index = 0; index < 4; ++index){
;
	lda     #$00
	sta     _index
L0C47:	lda     _index
	cmp     #$04
	jcs     L0C48
;
; SPRITE_ENEMY[index4] = MetaSprite_Y[index] + Enemy3y;
;
	lda     #<(_SPRITE_ENEMY)
	ldx     #>(_SPRITE_ENEMY)
	clc
	adc     _index4
	bcc     L033C
	inx
L033C:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_Y,y
	clc
	adc     _Enemy3y
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITE_ENEMY[index4] = Enemy_Tiles[index + Tile_Number];
;
	lda     #<(_SPRITE_ENEMY)
	ldx     #>(_SPRITE_ENEMY)
	clc
	adc     _index4
	bcc     L0343
	inx
L0343:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _index
	clc
	adc     _Tile_Number
	bcc     L0C2D
	inx
L0C2D:	sta     ptr1
	txa
	clc
	adc     #>(_Enemy_Tiles)
	sta     ptr1+1
	ldy     #<(_Enemy_Tiles)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; ++index4;
;
	inc     _index4
;
; SPRITE_ENEMY[index4] = Enemy3_Type; //attributes, change later
;
	ldy     _index4
	lda     _Enemy3_Type
	sta     _SPRITE_ENEMY,y
;
; ++index4;
;
	inc     _index4
;
; SPRITE_ENEMY[index4] = MetaSprite_X[index] + Enemy3x;
;
	lda     #<(_SPRITE_ENEMY)
	ldx     #>(_SPRITE_ENEMY)
	clc
	adc     _index4
	bcc     L034E
	inx
L034E:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_X,y
	clc
	adc     _Enemy3x
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; for (index = 0; index < 4; ++index){
;
	inc     _index
	jmp     L0C47
;
; if (Enemy4_Type != 0){
;
L0C48:	lda     _Enemy4_Type
	jeq     L0C4A
;
; Tile_Number = (Enemy4_Type - 1) << 2; //type of ship
;
	sec
	sbc     #$01
	asl     a
	asl     a
	sta     _Tile_Number
;
; for (index = 0; index < 4; ++index){
;
	lda     #$00
	sta     _index
L0C49:	lda     _index
	cmp     #$04
	jcs     L0C4A
;
; SPRITE_ENEMY[index4] = MetaSprite_Y[index] + Enemy4y;
;
	lda     #<(_SPRITE_ENEMY)
	ldx     #>(_SPRITE_ENEMY)
	clc
	adc     _index4
	bcc     L0363
	inx
L0363:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_Y,y
	clc
	adc     _Enemy4y
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; SPRITE_ENEMY[index4] = Enemy_Tiles[index + Tile_Number];
;
	lda     #<(_SPRITE_ENEMY)
	ldx     #>(_SPRITE_ENEMY)
	clc
	adc     _index4
	bcc     L036A
	inx
L036A:	sta     sreg
	stx     sreg+1
	ldx     #$00
	lda     _index
	clc
	adc     _Tile_Number
	bcc     L0C30
	inx
L0C30:	sta     ptr1
	txa
	clc
	adc     #>(_Enemy_Tiles)
	sta     ptr1+1
	ldy     #<(_Enemy_Tiles)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; ++index4;
;
	inc     _index4
;
; SPRITE_ENEMY[index4] = Enemy4_Type; //attributes, change later
;
	ldy     _index4
	lda     _Enemy4_Type
	sta     _SPRITE_ENEMY,y
;
; ++index4;
;
	inc     _index4
;
; SPRITE_ENEMY[index4] = MetaSprite_X[index] + Enemy4x;
;
	lda     #<(_SPRITE_ENEMY)
	ldx     #>(_SPRITE_ENEMY)
	clc
	adc     _index4
	bcc     L0375
	inx
L0375:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _MetaSprite_X,y
	clc
	adc     _Enemy4x
	ldy     #$00
	sta     (ptr1),y
;
; ++index4;
;
	inc     _index4
;
; for (index = 0; index < 4; ++index){
;
	inc     _index
	jmp     L0C49
;
; SPRITE_ENEMY[index4] = 0xf8;
;
L037A:	ldy     _index4
	lda     #$F8
	sta     _SPRITE_ENEMY,y
;
; index4 += 4;
;
	lda     #$04
	clc
	adc     _index4
	sta     _index4
;
; while (index4 < 0x40){
;
L0C4A:	lda     _index4
	cmp     #$40
	bcc     L037A
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ move_logic (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_move_logic: near

.segment	"CODE"

;
; if (injury_Timer == 0){ 
;
	lda     _injury_Timer
	jne     L0C5F
;
; if ((joypad1 & (RIGHT|LEFT)) == 0){ //no L or R
;
	lda     _joypad1
	and     #$03
	bne     L0C59
;
; if (X_speed > 0){ //if positive, going right
;
	lda     _X_speed
	sec
	sbc     #$01
	bvs     L038F
	eor     #$80
L038F:	bpl     L0C56
;
; --X_speed;
;
	dec     _X_speed
;
; if (X_speed > 0){ //if positive, going right
;
L0C56:	lda     _X_speed
	sec
	sbc     #$01
	bvs     L0395
	eor     #$80
L0395:	bpl     L0C57
;
; --X_speed;
;
	dec     _X_speed
;
; if (X_speed < 0){ //going left
;
L0C57:	lda     _X_speed
	asl     a
	bcc     L0C58
;
; ++X_speed;;
;
	inc     _X_speed
;
; if (X_speed < 0){ //going left
;
L0C58:	lda     _X_speed
	asl     a
	bcc     L0C59
;
; ++X_speed;;
;
	inc     _X_speed
;
; if ((joypad1 & RIGHT) > 0){
;
L0C59:	lda     _joypad1
	and     #$01
	beq     L0C5A
;
; if (X_speed >= 0){ //going right
;
	ldx     _X_speed
	bmi     L03A6
;
; X_speed += 2;
;
	lda     #$02
	clc
	adc     _X_speed
	sta     _X_speed
	bpl     L0C5A
;
; else {//going left
;
	jmp     L0C5A
;
; X_speed += 4;//double friction
;
L03A6:	lda     #$04
	clc
	adc     _X_speed
	sta     _X_speed
;
; if ((joypad1 & LEFT) > 0){
;
L0C5A:	lda     _joypad1
	and     #$02
	beq     L0C5C
;
; if (X_speed < 0){ //going left
;
	lda     _X_speed
	asl     a
	bcc     L0C5B
;
; X_speed -= 2;
;
	lda     _X_speed
	sec
	sbc     #$02
	sta     _X_speed
	bpl     L0C5C
;
; else {//going right
;
	jmp     L0C5C
;
; X_speed -= 4;//double friction
;
L0C5B:	lda     _X_speed
	sec
	sbc     #$04
	sta     _X_speed
;
; if (X_speed >= 0){ //going right
;
L0C5C:	ldx     _X_speed
	bmi     L03BE
;
; if (X_speed > 0x34){
;
	lda     _X_speed
	sec
	sbc     #$35
	bvs     L03C4
	eor     #$80
L03C4:	bpl     L0C5D
;
; X_speed = 0x34;
;
	lda     #$34
;
; else {
;
	jmp     L0C4D
;
; if (X_speed < (-0x24)){
;
L03BE:	lda     _X_speed
	sec
	sbc     #$DC
	bvc     L03CC
	eor     #$80
L03CC:	bpl     L0C5D
;
; X_speed = (-0x24); //0xe0
;
	lda     #$DC
L0C4D:	sta     _X_speed
;
; X1old = X1;
;
L0C5D:	lda     _X1
	sta     _X1old
;
; X1 += X_speed>>4;
;
	ldx     #$00
	lda     _X_speed
	bpl     L03D4
	dex
L03D4:	jsr     asrax4
	clc
	adc     _X1
	sta     _X1
;
; if (X1 > 0xf0){//too far right or left
;
	cmp     #$F1
	bcc     L0C5E
;
; X1 = X1old;
;
	lda     _X1old
	sta     _X1
;
; X_speed = 7; //was 0, but I was getting a pause on Right
;
	lda     #$07
	sta     _X_speed
;
; if (X1 == 0) X1 = 1; //fix bullet too far left issue
;
L0C5E:	lda     _X1
	bne     L0C5F
	lda     #$01
	sta     _X1
;
; --Vert_scroll;
;
L0C5F:	dec     _Vert_scroll
;
; if (Vert_scroll > 0xef)
;
	lda     _Vert_scroll
	cmp     #$F0
	bcc     L0C60
;
; Vert_scroll = 0xef; //screen is only 240 pixels high
;
	lda     #$EF
	sta     _Vert_scroll
;
; if ((bullet_Wait == 0)&&(injury_Timer == 0)){
;
L0C60:	lda     _bullet_Wait
	jne     L0C6A
	lda     _injury_Timer
	jne     L0C6A
;
; if ((joypad1 & (B_BUTTON|A_BUTTON)) > 0){
;
	lda     _joypad1
	and     #$C0
	jeq     L0C6A
;
; if (SFx_Wait == 0){
;
	lda     _SFx_Wait
	bne     L0C63
;
; Play_Fx(0);
;
	jsr     _Play_Fx
;
; bullet_Wait = 0x14;
;
L0C63:	lda     #$14
	sta     _bullet_Wait
;
; if (Bullet1y >= 0xf0){ //if y > f0 = it's off
;
	lda     _Bullet1y
	cmp     #$F0
	bcc     L0C64
;
; Bullet1y = 0xca;
;
	lda     #$CA
	sta     _Bullet1y
;
; Bullet1x = X1;
;
	lda     _X1
	sta     _Bullet1x
;
; else if (Bullet2y >= 0xf0){
;
	jmp     L0C6A
L0C64:	lda     _Bullet2y
	cmp     #$F0
	bcc     L0C65
;
; Bullet2y = 0xca;
;
	lda     #$CA
	sta     _Bullet2y
;
; Bullet2x = X1;
;
	lda     _X1
	sta     _Bullet2x
;
; else if (Bullet3y >= 0xf0){
;
	jmp     L0C6A
L0C65:	lda     _Bullet3y
	cmp     #$F0
	bcc     L0C66
;
; Bullet3y = 0xca;
;
	lda     #$CA
	sta     _Bullet3y
;
; Bullet3x = X1;
;
	lda     _X1
	sta     _Bullet3x
;
; else if (Bullet4y >= 0xf0){
;
	jmp     L0C6A
L0C66:	lda     _Bullet4y
	cmp     #$F0
	bcc     L0C67
;
; Bullet4y = 0xca;
;
	lda     #$CA
	sta     _Bullet4y
;
; Bullet4x = X1;
;
	lda     _X1
	sta     _Bullet4x
;
; else if (Bullet5y >= 0xf0){
;
	jmp     L0C6A
L0C67:	lda     _Bullet5y
	cmp     #$F0
	bcc     L0C68
;
; Bullet5y = 0xca;
;
	lda     #$CA
	sta     _Bullet5y
;
; Bullet5x = X1;
;
	lda     _X1
	sta     _Bullet5x
;
; else if (Bullet6y >= 0xf0){
;
	jmp     L0C6A
L0C68:	lda     _Bullet6y
	cmp     #$F0
	bcc     L0C69
;
; Bullet6y = 0xca;
;
	lda     #$CA
	sta     _Bullet6y
;
; Bullet6x = X1;
;
	lda     _X1
	sta     _Bullet6x
;
; else if (Bullet7y >= 0xf0){
;
	jmp     L0C6A
L0C69:	lda     _Bullet7y
	cmp     #$F0
	bcc     L0C6A
;
; Bullet7y = 0xca;
;
	lda     #$CA
	sta     _Bullet7y
;
; Bullet7x = X1;
;
	lda     _X1
	sta     _Bullet7x
;
; if(bullet_Wait != 0)
;
L0C6A:	lda     _bullet_Wait
	beq     L0C6B
;
; --bullet_Wait;
;
	dec     _bullet_Wait
;
; if (Bullet1y < 0xf0){
;
L0C6B:	lda     _Bullet1y
	cmp     #$F0
	bcs     L0C6C
;
; --Bullet1y;
;
	dec     _Bullet1y
;
; --Bullet1y;
;
	dec     _Bullet1y
;
; SPRITE_BULLET[0] = Bullet1y;
;
	lda     _Bullet1y
	sta     _SPRITE_BULLET
;
; SPRITE_BULLET[4] = Bullet1y;
;
	lda     _Bullet1y
	sta     _SPRITE_BULLET+4
;
; SPRITE_BULLET[3] = Bullet1x - 1;
;
	lda     _Bullet1x
	sec
	sbc     #$01
	sta     _SPRITE_BULLET+3
;
; SPRITE_BULLET[7] = Bullet1x + 13;
;
	lda     _Bullet1x
	clc
	adc     #$0D
	sta     _SPRITE_BULLET+7
;
; SPRITE_BULLET[1] = 0x12; //which tile
;
	lda     #$12
	sta     _SPRITE_BULLET+1
;
; SPRITE_BULLET[5] = 0x12;
;
	sta     _SPRITE_BULLET+5
;
; else {
;
	jmp     L0C6D
;
; SPRITE_BULLET[0] = 0xf8;
;
L0C6C:	lda     #$F8
	sta     _SPRITE_BULLET
;
; SPRITE_BULLET[4] = 0xf8;
;
	sta     _SPRITE_BULLET+4
;
; if (Bullet2y < 0xf0){
;
L0C6D:	lda     _Bullet2y
	cmp     #$F0
	bcs     L0C6E
;
; --Bullet2y;
;
	dec     _Bullet2y
;
; --Bullet2y;
;
	dec     _Bullet2y
;
; SPRITE_BULLET[8] = Bullet2y;
;
	lda     _Bullet2y
	sta     _SPRITE_BULLET+8
;
; SPRITE_BULLET[12] = Bullet2y;
;
	lda     _Bullet2y
	sta     _SPRITE_BULLET+12
;
; SPRITE_BULLET[11] = Bullet2x - 1;
;
	lda     _Bullet2x
	sec
	sbc     #$01
	sta     _SPRITE_BULLET+11
;
; SPRITE_BULLET[15] = Bullet2x + 13;
;
	lda     _Bullet2x
	clc
	adc     #$0D
	sta     _SPRITE_BULLET+15
;
; SPRITE_BULLET[9] = 0x12; //which tile
;
	lda     #$12
	sta     _SPRITE_BULLET+9
;
; SPRITE_BULLET[13] = 0x12;
;
	sta     _SPRITE_BULLET+13
;
; else {
;
	jmp     L0C6F
;
; SPRITE_BULLET[8] = 0xf8;
;
L0C6E:	lda     #$F8
	sta     _SPRITE_BULLET+8
;
; SPRITE_BULLET[12] = 0xf8;
;
	sta     _SPRITE_BULLET+12
;
; if (Bullet3y < 0xf0){
;
L0C6F:	lda     _Bullet3y
	cmp     #$F0
	bcs     L0C70
;
; --Bullet3y;
;
	dec     _Bullet3y
;
; --Bullet3y;
;
	dec     _Bullet3y
;
; SPRITE_BULLET[16] = Bullet3y;
;
	lda     _Bullet3y
	sta     _SPRITE_BULLET+16
;
; SPRITE_BULLET[20] = Bullet3y;
;
	lda     _Bullet3y
	sta     _SPRITE_BULLET+20
;
; SPRITE_BULLET[19] = Bullet3x - 1;
;
	lda     _Bullet3x
	sec
	sbc     #$01
	sta     _SPRITE_BULLET+19
;
; SPRITE_BULLET[23] = Bullet3x + 13;
;
	lda     _Bullet3x
	clc
	adc     #$0D
	sta     _SPRITE_BULLET+23
;
; SPRITE_BULLET[17] = 0x12; //which tile
;
	lda     #$12
	sta     _SPRITE_BULLET+17
;
; SPRITE_BULLET[21] = 0x12;
;
	sta     _SPRITE_BULLET+21
;
; else {
;
	jmp     L0C71
;
; SPRITE_BULLET[16] = 0xf8;
;
L0C70:	lda     #$F8
	sta     _SPRITE_BULLET+16
;
; SPRITE_BULLET[20] = 0xf8;
;
	sta     _SPRITE_BULLET+20
;
; if (Bullet4y < 0xf0){
;
L0C71:	lda     _Bullet4y
	cmp     #$F0
	bcs     L0C72
;
; --Bullet4y;
;
	dec     _Bullet4y
;
; --Bullet4y;
;
	dec     _Bullet4y
;
; SPRITE_BULLET[24] = Bullet4y;
;
	lda     _Bullet4y
	sta     _SPRITE_BULLET+24
;
; SPRITE_BULLET[28] = Bullet4y;
;
	lda     _Bullet4y
	sta     _SPRITE_BULLET+28
;
; SPRITE_BULLET[27] = Bullet4x - 1;
;
	lda     _Bullet4x
	sec
	sbc     #$01
	sta     _SPRITE_BULLET+27
;
; SPRITE_BULLET[31] = Bullet4x + 13;
;
	lda     _Bullet4x
	clc
	adc     #$0D
	sta     _SPRITE_BULLET+31
;
; SPRITE_BULLET[25] = 0x12; //which tile
;
	lda     #$12
	sta     _SPRITE_BULLET+25
;
; SPRITE_BULLET[29] = 0x12;
;
	sta     _SPRITE_BULLET+29
;
; else {
;
	jmp     L0C73
;
; SPRITE_BULLET[24] = 0xf8;
;
L0C72:	lda     #$F8
	sta     _SPRITE_BULLET+24
;
; SPRITE_BULLET[28] = 0xf8;
;
	sta     _SPRITE_BULLET+28
;
; if (Bullet5y < 0xf0){
;
L0C73:	lda     _Bullet5y
	cmp     #$F0
	bcs     L0C74
;
; --Bullet5y;
;
	dec     _Bullet5y
;
; --Bullet5y;
;
	dec     _Bullet5y
;
; SPRITE_BULLET[32] = Bullet5y;
;
	lda     _Bullet5y
	sta     _SPRITE_BULLET+32
;
; SPRITE_BULLET[36] = Bullet5y;
;
	lda     _Bullet5y
	sta     _SPRITE_BULLET+36
;
; SPRITE_BULLET[35] = Bullet5x - 1;
;
	lda     _Bullet5x
	sec
	sbc     #$01
	sta     _SPRITE_BULLET+35
;
; SPRITE_BULLET[39] = Bullet5x + 13;
;
	lda     _Bullet5x
	clc
	adc     #$0D
	sta     _SPRITE_BULLET+39
;
; SPRITE_BULLET[33] = 0x12; //which tile
;
	lda     #$12
	sta     _SPRITE_BULLET+33
;
; SPRITE_BULLET[37] = 0x12;
;
	sta     _SPRITE_BULLET+37
;
; else {
;
	jmp     L0C75
;
; SPRITE_BULLET[32] = 0xf8;
;
L0C74:	lda     #$F8
	sta     _SPRITE_BULLET+32
;
; SPRITE_BULLET[36] = 0xf8;
;
	sta     _SPRITE_BULLET+36
;
; if (Bullet6y < 0xf0){
;
L0C75:	lda     _Bullet6y
	cmp     #$F0
	bcs     L0C76
;
; --Bullet6y;
;
	dec     _Bullet6y
;
; --Bullet6y;
;
	dec     _Bullet6y
;
; SPRITE_BULLET[40] = Bullet6y;
;
	lda     _Bullet6y
	sta     _SPRITE_BULLET+40
;
; SPRITE_BULLET[44] = Bullet6y;
;
	lda     _Bullet6y
	sta     _SPRITE_BULLET+44
;
; SPRITE_BULLET[43] = Bullet6x - 1;
;
	lda     _Bullet6x
	sec
	sbc     #$01
	sta     _SPRITE_BULLET+43
;
; SPRITE_BULLET[47] = Bullet6x + 13;
;
	lda     _Bullet6x
	clc
	adc     #$0D
	sta     _SPRITE_BULLET+47
;
; SPRITE_BULLET[41] = 0x12; //which tile
;
	lda     #$12
	sta     _SPRITE_BULLET+41
;
; SPRITE_BULLET[45] = 0x12;
;
	sta     _SPRITE_BULLET+45
;
; else {
;
	jmp     L0C77
;
; SPRITE_BULLET[40] = 0xf8;
;
L0C76:	lda     #$F8
	sta     _SPRITE_BULLET+40
;
; SPRITE_BULLET[44] = 0xf8;
;
	sta     _SPRITE_BULLET+44
;
; if (Bullet7y < 0xf0){
;
L0C77:	lda     _Bullet7y
	cmp     #$F0
	bcs     L0C78
;
; --Bullet7y;
;
	dec     _Bullet7y
;
; --Bullet7y;
;
	dec     _Bullet7y
;
; SPRITE_BULLET[48] = Bullet7y;
;
	lda     _Bullet7y
	sta     _SPRITE_BULLET+48
;
; SPRITE_BULLET[52] = Bullet7y;
;
	lda     _Bullet7y
	sta     _SPRITE_BULLET+52
;
; SPRITE_BULLET[51] = Bullet7x - 1;
;
	lda     _Bullet7x
	sec
	sbc     #$01
	sta     _SPRITE_BULLET+51
;
; SPRITE_BULLET[55] = Bullet7x + 13;
;
	lda     _Bullet7x
	clc
	adc     #$0D
	sta     _SPRITE_BULLET+55
;
; SPRITE_BULLET[49] = 0x12; //which tile
;
	lda     #$12
	sta     _SPRITE_BULLET+49
;
; SPRITE_BULLET[53] = 0x12;
;
	sta     _SPRITE_BULLET+53
;
; if (Game_Mode == RUN_GAME_MODE){
;
L0C78:	lda     _Game_Mode
	cmp     #$01
	beq     L0C90
;
; }
;
	rts
;
; temp2 = (Frame_Count & 1);//0 or 1
;
L0C90:	lda     _Frame_Count
	and     #$01
	sta     _temp2
;
; temp = temp2 + 2;//2 or 3
;
	clc
	adc     #$02
	sta     _temp
;
; if(Enemy1_Type == 1) {
;
	lda     _Enemy1_Type
	cmp     #$01
	bne     L0C7A
;
; Enemy1y += 2;
;
	lda     #$02
	clc
	adc     _Enemy1y
	sta     _Enemy1y
;
; if((Frame_Count & 0x1f) > 15){
;
	lda     _Frame_Count
	and     #$1F
	cmp     #$10
	bcc     L0C79
;
; Enemy1x += temp2;;
;
	lda     _temp2
	clc
;
; else{
;
	jmp     L0C8C
;
; Enemy1x -= temp2;
;
L0C79:	lda     _temp2
	eor     #$FF
	sec
L0C8C:	adc     _Enemy1x
	sta     _Enemy1x
;
; if(Enemy1_Type == 2) {
;
L0C7A:	lda     _Enemy1_Type
	cmp     #$02
	bne     L0C7C
;
; Enemy1y += temp;
;
	lda     _temp
	clc
	adc     _Enemy1y
	sta     _Enemy1y
;
; if((Frame_Count & 0x01) == 1){
;
	lda     _Frame_Count
	and     #$01
	cmp     #$01
	bne     L0C7C
;
; if (X1 > Enemy1x){
;
	lda     _X1
	sec
	sbc     _Enemy1x
	bcc     L0C7B
	beq     L0C7B
;
; ++Enemy1x;
;
	inc     _Enemy1x
;
; else{
;
	jmp     L0C7C
;
; --Enemy1x;
;
L0C7B:	dec     _Enemy1x
;
; if (Enemy1y > 0xf0){
;
L0C7C:	lda     _Enemy1y
	cmp     #$F1
	bcc     L0C7D
;
; Enemy1_Type = 0;
;
	lda     #$00
	sta     _Enemy1_Type
;
; if(Enemy2_Type == 1) {
;
L0C7D:	lda     _Enemy2_Type
	cmp     #$01
	bne     L0C7F
;
; Enemy2y += 2;
;
	lda     #$02
	clc
	adc     _Enemy2y
	sta     _Enemy2y
;
; if((Frame_Count & 0x1f) > 15){
;
	lda     _Frame_Count
	and     #$1F
	cmp     #$10
	bcc     L0C7E
;
; Enemy2x += temp2;;
;
	lda     _temp2
	clc
;
; else{
;
	jmp     L0C8D
;
; Enemy2x -= temp2;
;
L0C7E:	lda     _temp2
	eor     #$FF
	sec
L0C8D:	adc     _Enemy2x
	sta     _Enemy2x
;
; if(Enemy2_Type == 2) {
;
L0C7F:	lda     _Enemy2_Type
	cmp     #$02
	bne     L0C81
;
; Enemy2y += temp;
;
	lda     _temp
	clc
	adc     _Enemy2y
	sta     _Enemy2y
;
; if((Frame_Count & 0x01) == 1){
;
	lda     _Frame_Count
	and     #$01
	cmp     #$01
	bne     L0C81
;
; if (X1 > Enemy2x){
;
	lda     _X1
	sec
	sbc     _Enemy2x
	bcc     L0C80
	beq     L0C80
;
; ++Enemy2x;
;
	inc     _Enemy2x
;
; else{
;
	jmp     L0C81
;
; --Enemy2x;
;
L0C80:	dec     _Enemy2x
;
; if (Enemy2y > 0xf0)
;
L0C81:	lda     _Enemy2y
	cmp     #$F1
	bcc     L0C82
;
; Enemy2_Type = 0;
;
	lda     #$00
	sta     _Enemy2_Type
;
; if(Enemy3_Type == 1) {
;
L0C82:	lda     _Enemy3_Type
	cmp     #$01
	bne     L0C84
;
; Enemy3y += 2;
;
	lda     #$02
	clc
	adc     _Enemy3y
	sta     _Enemy3y
;
; if((Frame_Count & 0x1f) > 15){
;
	lda     _Frame_Count
	and     #$1F
	cmp     #$10
	bcc     L0C83
;
; Enemy3x += temp2;
;
	lda     _temp2
	clc
;
; else{
;
	jmp     L0C8E
;
; Enemy3x -= temp2;
;
L0C83:	lda     _temp2
	eor     #$FF
	sec
L0C8E:	adc     _Enemy3x
	sta     _Enemy3x
;
; if(Enemy3_Type == 2) {
;
L0C84:	lda     _Enemy3_Type
	cmp     #$02
	bne     L0C86
;
; Enemy3y += temp;
;
	lda     _temp
	clc
	adc     _Enemy3y
	sta     _Enemy3y
;
; if((Frame_Count & 0x01) == 1){
;
	lda     _Frame_Count
	and     #$01
	cmp     #$01
	bne     L0C86
;
; if (X1 > Enemy3x){
;
	lda     _X1
	sec
	sbc     _Enemy3x
	bcc     L0C85
	beq     L0C85
;
; ++Enemy3x;
;
	inc     _Enemy3x
;
; else{
;
	jmp     L0C86
;
; --Enemy3x;
;
L0C85:	dec     _Enemy3x
;
; if (Enemy3y > 0xf0)
;
L0C86:	lda     _Enemy3y
	cmp     #$F1
	bcc     L0C87
;
; Enemy3_Type = 0;
;
	lda     #$00
	sta     _Enemy3_Type
;
; if(Enemy4_Type == 1) {
;
L0C87:	lda     _Enemy4_Type
	cmp     #$01
	bne     L0C89
;
; Enemy4y += 2;
;
	lda     #$02
	clc
	adc     _Enemy4y
	sta     _Enemy4y
;
; if((Frame_Count & 0x1f) > 15){
;
	lda     _Frame_Count
	and     #$1F
	cmp     #$10
	bcc     L0C88
;
; Enemy4x += temp2;
;
	lda     _temp2
	clc
;
; else{
;
	jmp     L0C8F
;
; Enemy4x -= temp2;
;
L0C88:	lda     _temp2
	eor     #$FF
	sec
L0C8F:	adc     _Enemy4x
	sta     _Enemy4x
;
; if(Enemy4_Type == 2) {
;
L0C89:	lda     _Enemy4_Type
	cmp     #$02
	bne     L0C8B
;
; Enemy4y += temp;
;
	lda     _temp
	clc
	adc     _Enemy4y
	sta     _Enemy4y
;
; if((Frame_Count & 0x01) == 1){
;
	lda     _Frame_Count
	and     #$01
	cmp     #$01
	bne     L0C8B
;
; if (X1 > Enemy4x){
;
	lda     _X1
	sec
	sbc     _Enemy4x
	bcc     L0C8A
	beq     L0C8A
;
; ++Enemy4x;
;
	inc     _Enemy4x
;
; else{
;
	jmp     L0C8B
;
; --Enemy4x;
;
L0C8A:	dec     _Enemy4x
;
; if (Enemy4y > 0xf0){
;
L0C8B:	lda     _Enemy4y
	cmp     #$F1
	bcc     L0572
;
; Enemy4_Type = 0;
;
	lda     #$00
	sta     _Enemy4_Type
;
; }
;
L0572:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Draw_Title (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Draw_Title: near

.segment	"CODE"

;
; PPU_ADDRESS = 0x20; //address of nametable #0 = 0x2000
;
	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; BGD_address = (int)&Title;
;
	lda     #<(_Title)
	ldx     #>(_Title)
	sta     _BGD_address
	stx     _BGD_address+1
;
; UnRLE(BGD_address); //uncompresses our data
;
	jsr     _UnRLE
;
; PPU_ADDRESS = 0x24; //draw the HUD on opposite nametable
;
	lda     #$24
	sta     $2006
;
; PPU_ADDRESS = 0x64;
;
	lda     #$64
	sta     $2006
;
; for(index=0;index < sizeof(HUD);++index){
;
	lda     #$00
	sta     _index
L0C91:	lda     _index
	cmp     #$07
	bcs     L0C92
;
; PPU_DATA = HUD[index];
;
	ldy     _index
	lda     _HUD,y
	sta     $2007
;
; for(index=0;index < sizeof(HUD);++index){
;
	inc     _index
	jmp     L0C91
;
; PPU_ADDRESS = 0x24;
;
L0C92:	lda     #$24
	sta     $2006
;
; PPU_ADDRESS = 0x74;
;
	lda     #$74
	sta     $2006
;
; for(index=0;index < sizeof(HUD);++index){
;
	lda     #$00
	sta     _index
L0C93:	lda     _index
	cmp     #$07
	bcs     L0C94
;
; PPU_DATA = HUD2[index];
;
	ldy     _index
	lda     _HUD2,y
	sta     $2007
;
; for(index=0;index < sizeof(HUD);++index){
;
	inc     _index
	jmp     L0C93
;
; PPU_ADDRESS = 0x27;
;
L0C94:	lda     #$27
	sta     $2006
;
; PPU_ADDRESS = 0xc0;
;
	lda     #$C0
	sta     $2006
;
; for(index=0;index < 8;++index){
;
	lda     #$00
	sta     _index
L0C95:	lda     _index
	cmp     #$08
	bcs     L05B0
;
; PPU_DATA = 0xff;
;
	lda     #$FF
	sta     $2007
;
; for(index=0;index < 8;++index){
;
	inc     _index
	jmp     L0C95
;
; }
;
L05B0:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Draw_Background (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Draw_Background: near

.segment	"CODE"

;
; All_Off();
;
	jsr     _All_Off
;
; PPU_ADDRESS = 0x20; //address of nametable #0 = 0x2000
;
	lda     #$20
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; BGD_address = (int)&Stars;
;
	lda     #<(_Stars)
	ldx     #>(_Stars)
	sta     _BGD_address
	stx     _BGD_address+1
;
; UnRLE(BGD_address); //uncompresses our data
;
	jsr     _UnRLE
;
; PPU_ADDRESS = 0x3f; //address of BG#0 Palette
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x01;
;
	lda     #$01
	sta     $2006
;
; PPU_DATA = 3;
;
	lda     #$03
	sta     $2007
;
; PPU_DATA = 0x27;
;
	lda     #$27
	sta     $2007
;
; PPU_DATA = 5;
;
	lda     #$05
	sta     $2007
;
; Wait_Vblank();
;
	jsr     _Wait_Vblank
;
; SCROLL = 0;
;
	lda     #$00
	sta     $2005
;
; SCROLL = 0;
;
	sta     $2005
;
; PPU_CTRL = 0x91; //screen is on, NMI on
;
	lda     #$91
	sta     $2000
;
; PPU_MASK = 0x1e;
;
	lda     #$1E
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Turn_On_Pause_Sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Turn_On_Pause_Sprites: near

.segment	"CODE"

;
; SPRITE_TEXT[0] = 0x70;
;
	lda     #$70
	sta     _SPRITE_TEXT
;
; SPRITE_TEXT[1] = (char)'P';
;
	lda     #$50
	sta     _SPRITE_TEXT+1
;
; SPRITE_TEXT[2] = 0;
;
	lda     #$00
	sta     _SPRITE_TEXT+2
;
; SPRITE_TEXT[3] = 0x70;
;
	lda     #$70
	sta     _SPRITE_TEXT+3
;
; SPRITE_TEXT[4] = 0x70;
;
	sta     _SPRITE_TEXT+4
;
; SPRITE_TEXT[5] = (char)'a';
;
	lda     #$61
	sta     _SPRITE_TEXT+5
;
; SPRITE_TEXT[6] = 0;
;
	lda     #$00
	sta     _SPRITE_TEXT+6
;
; SPRITE_TEXT[7] = 0x78;
;
	lda     #$78
	sta     _SPRITE_TEXT+7
;
; SPRITE_TEXT[8] = 0x70;
;
	lda     #$70
	sta     _SPRITE_TEXT+8
;
; SPRITE_TEXT[9] = (char)'u';
;
	lda     #$75
	sta     _SPRITE_TEXT+9
;
; SPRITE_TEXT[10] = 0;
;
	lda     #$00
	sta     _SPRITE_TEXT+10
;
; SPRITE_TEXT[11] = 0x80;
;
	lda     #$80
	sta     _SPRITE_TEXT+11
;
; SPRITE_TEXT[12] = 0x70;
;
	lda     #$70
	sta     _SPRITE_TEXT+12
;
; SPRITE_TEXT[13] = (char)'s';
;
	lda     #$73
	sta     _SPRITE_TEXT+13
;
; SPRITE_TEXT[14] = 0;
;
	lda     #$00
	sta     _SPRITE_TEXT+14
;
; SPRITE_TEXT[15] = 0x88;
;
	lda     #$88
	sta     _SPRITE_TEXT+15
;
; SPRITE_TEXT[16] = 0x70;
;
	lda     #$70
	sta     _SPRITE_TEXT+16
;
; SPRITE_TEXT[17] = (char)'e';
;
	lda     #$65
	sta     _SPRITE_TEXT+17
;
; SPRITE_TEXT[18] = 0;
;
	lda     #$00
	sta     _SPRITE_TEXT+18
;
; SPRITE_TEXT[19] = 0x90;
;
	lda     #$90
	sta     _SPRITE_TEXT+19
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Turn_On_Game_Over_Sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Turn_On_Game_Over_Sprites: near

.segment	"CODE"

;
; SPRITE_TEXT[0] = 0x70;
;
	lda     #$70
	sta     _SPRITE_TEXT
;
; SPRITE_TEXT[1] = (char)'G';
;
	lda     #$47
	sta     _SPRITE_TEXT+1
;
; SPRITE_TEXT[2] = 0;
;
	lda     #$00
	sta     _SPRITE_TEXT+2
;
; SPRITE_TEXT[3] = 0x60;
;
	lda     #$60
	sta     _SPRITE_TEXT+3
;
; SPRITE_TEXT[4] = 0x70;
;
	lda     #$70
	sta     _SPRITE_TEXT+4
;
; SPRITE_TEXT[5] = (char)'a';
;
	lda     #$61
	sta     _SPRITE_TEXT+5
;
; SPRITE_TEXT[6] = 0;
;
	lda     #$00
	sta     _SPRITE_TEXT+6
;
; SPRITE_TEXT[7] = 0x68;
;
	lda     #$68
	sta     _SPRITE_TEXT+7
;
; SPRITE_TEXT[8] = 0x70;
;
	lda     #$70
	sta     _SPRITE_TEXT+8
;
; SPRITE_TEXT[9] = (char)'m';
;
	lda     #$6D
	sta     _SPRITE_TEXT+9
;
; SPRITE_TEXT[10] = 0;
;
	lda     #$00
	sta     _SPRITE_TEXT+10
;
; SPRITE_TEXT[11] = 0x70;
;
	lda     #$70
	sta     _SPRITE_TEXT+11
;
; SPRITE_TEXT[12] = 0x70;
;
	sta     _SPRITE_TEXT+12
;
; SPRITE_TEXT[13] = (char)'e';
;
	lda     #$65
	sta     _SPRITE_TEXT+13
;
; SPRITE_TEXT[14] = 0;
;
	lda     #$00
	sta     _SPRITE_TEXT+14
;
; SPRITE_TEXT[15] = 0x78;
;
	lda     #$78
	sta     _SPRITE_TEXT+15
;
; SPRITE_TEXT[16] = 0x70;
;
	lda     #$70
	sta     _SPRITE_TEXT+16
;
; SPRITE_TEXT[17] = (char)'O';
;
	lda     #$4F
	sta     _SPRITE_TEXT+17
;
; SPRITE_TEXT[18] = 0;
;
	lda     #$00
	sta     _SPRITE_TEXT+18
;
; SPRITE_TEXT[19] = 0x88;
;
	lda     #$88
	sta     _SPRITE_TEXT+19
;
; SPRITE_TEXT[20] = 0x70;
;
	lda     #$70
	sta     _SPRITE_TEXT+20
;
; SPRITE_TEXT[21] = (char)'v';
;
	lda     #$76
	sta     _SPRITE_TEXT+21
;
; SPRITE_TEXT[22] = 0;
;
	lda     #$00
	sta     _SPRITE_TEXT+22
;
; SPRITE_TEXT[23] = 0x90;
;
	lda     #$90
	sta     _SPRITE_TEXT+23
;
; SPRITE_TEXT[24] = 0x70;
;
	lda     #$70
	sta     _SPRITE_TEXT+24
;
; SPRITE_TEXT[25] = (char)'e';
;
	lda     #$65
	sta     _SPRITE_TEXT+25
;
; SPRITE_TEXT[26] = 0;
;
	lda     #$00
	sta     _SPRITE_TEXT+26
;
; SPRITE_TEXT[27] = 0x98;
;
	lda     #$98
	sta     _SPRITE_TEXT+27
;
; SPRITE_TEXT[28] = 0x70;
;
	lda     #$70
	sta     _SPRITE_TEXT+28
;
; SPRITE_TEXT[29] = (char)'r';
;
	lda     #$72
	sta     _SPRITE_TEXT+29
;
; SPRITE_TEXT[30] = 0;
;
	lda     #$00
	sta     _SPRITE_TEXT+30
;
; SPRITE_TEXT[31] = 0xa0;
;
	lda     #$A0
	sta     _SPRITE_TEXT+31
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Turn_On_Victory_Sprites (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Turn_On_Victory_Sprites: near

.segment	"CODE"

;
; SPRITE_TEXT[0] = 0x70;
;
	lda     #$70
	sta     _SPRITE_TEXT
;
; SPRITE_TEXT[1] = (char)'V';
;
	lda     #$56
	sta     _SPRITE_TEXT+1
;
; SPRITE_TEXT[2] = 0;
;
	lda     #$00
	sta     _SPRITE_TEXT+2
;
; SPRITE_TEXT[3] = 0x60;
;
	lda     #$60
	sta     _SPRITE_TEXT+3
;
; SPRITE_TEXT[4] = 0x70;
;
	lda     #$70
	sta     _SPRITE_TEXT+4
;
; SPRITE_TEXT[5] = (char)'i';
;
	lda     #$69
	sta     _SPRITE_TEXT+5
;
; SPRITE_TEXT[6] = 0;
;
	lda     #$00
	sta     _SPRITE_TEXT+6
;
; SPRITE_TEXT[7] = 0x68;
;
	lda     #$68
	sta     _SPRITE_TEXT+7
;
; SPRITE_TEXT[8] = 0x70;
;
	lda     #$70
	sta     _SPRITE_TEXT+8
;
; SPRITE_TEXT[9] = (char)'c';
;
	lda     #$63
	sta     _SPRITE_TEXT+9
;
; SPRITE_TEXT[10] = 0;
;
	lda     #$00
	sta     _SPRITE_TEXT+10
;
; SPRITE_TEXT[11] = 0x70;
;
	lda     #$70
	sta     _SPRITE_TEXT+11
;
; SPRITE_TEXT[12] = 0x70;
;
	sta     _SPRITE_TEXT+12
;
; SPRITE_TEXT[13] = (char)'t';
;
	lda     #$74
	sta     _SPRITE_TEXT+13
;
; SPRITE_TEXT[14] = 0;
;
	lda     #$00
	sta     _SPRITE_TEXT+14
;
; SPRITE_TEXT[15] = 0x78;
;
	lda     #$78
	sta     _SPRITE_TEXT+15
;
; SPRITE_TEXT[16] = 0x70;
;
	lda     #$70
	sta     _SPRITE_TEXT+16
;
; SPRITE_TEXT[17] = (char)'o';
;
	lda     #$6F
	sta     _SPRITE_TEXT+17
;
; SPRITE_TEXT[18] = 0;
;
	lda     #$00
	sta     _SPRITE_TEXT+18
;
; SPRITE_TEXT[19] = 0x80;
;
	lda     #$80
	sta     _SPRITE_TEXT+19
;
; SPRITE_TEXT[20] = 0x70;
;
	lda     #$70
	sta     _SPRITE_TEXT+20
;
; SPRITE_TEXT[21] = (char)'r';
;
	lda     #$72
	sta     _SPRITE_TEXT+21
;
; SPRITE_TEXT[22] = 0;
;
	lda     #$00
	sta     _SPRITE_TEXT+22
;
; SPRITE_TEXT[23] = 0x88;
;
	lda     #$88
	sta     _SPRITE_TEXT+23
;
; SPRITE_TEXT[24] = 0x70;
;
	lda     #$70
	sta     _SPRITE_TEXT+24
;
; SPRITE_TEXT[25] = (char)'y';
;
	lda     #$79
	sta     _SPRITE_TEXT+25
;
; SPRITE_TEXT[26] = 0;
;
	lda     #$00
	sta     _SPRITE_TEXT+26
;
; SPRITE_TEXT[27] = 0x90;
;
	lda     #$90
	sta     _SPRITE_TEXT+27
;
; SPRITE_TEXT[28] = 0x70;
;
	lda     #$70
	sta     _SPRITE_TEXT+28
;
; SPRITE_TEXT[29] = (char)'!';
;
	lda     #$21
	sta     _SPRITE_TEXT+29
;
; SPRITE_TEXT[30] = 0;
;
	lda     #$00
	sta     _SPRITE_TEXT+30
;
; SPRITE_TEXT[31] = 0x98;
;
	lda     #$98
	sta     _SPRITE_TEXT+31
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Set_Sprite_Zero (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Set_Sprite_Zero: near

.segment	"CODE"

;
; SPRITE_ZERO[0] = 0x1d;
;
	lda     #$1D
	sta     _SPRITE_ZERO
;
; SPRITE_ZERO[1] = 0xff;
;
	lda     #$FF
	sta     _SPRITE_ZERO+1
;
; SPRITE_ZERO[2] = 0x20;
;
	lda     #$20
	sta     _SPRITE_ZERO+2
;
; SPRITE_ZERO[3] = 0xb9;
;
	lda     #$B9
	sta     _SPRITE_ZERO+3
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ All_Collisions (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_All_Collisions: near

.segment	"CODE"

;
; objectA_right = objectAx + sizeAx;
;
	lda     _objectAx
	clc
	adc     _sizeAx
	sta     _objectA_right
;
; if (objectA_right < objectAx)
;
	cmp     _objectAx
	bcs     L0C9C
;
; objectA_right = 0xff;
;
	lda     #$FF
	sta     _objectA_right
;
; objectB_right = objectBx + sizeBx;
;
L0C9C:	lda     _objectBx
	clc
	adc     _sizeBx
	sta     _objectB_right
;
; if (objectB_right < objectBx)
;
	cmp     _objectBx
	bcs     L0C9D
;
; objectB_right = 0xff;
;
	lda     #$FF
	sta     _objectB_right
;
; objectA_bottom = objectAy + sizeAy;
;
L0C9D:	lda     _objectAy
	clc
	adc     _sizeAy
	sta     _objectA_bottom
;
; if (objectA_bottom < objectAy)
;
	cmp     _objectAy
	bcs     L0C9E
;
; objectA_bottom = 0xff;
;
	lda     #$FF
	sta     _objectA_bottom
;
; objectB_bottom = objectBy + sizeBy;
;
L0C9E:	lda     _objectBy
	clc
	adc     _sizeBy
	sta     _objectB_bottom
;
; if (objectB_bottom < objectBy)
;
	cmp     _objectBy
	bcs     L0C9F
;
; objectB_bottom = 0xff;
;
	lda     #$FF
	sta     _objectB_bottom
;
; if (objectAx <= objectB_right && objectA_right >= objectBx && objectAy <= objectB_bottom && objectA_bottom >= objectBy){
;
L0C9F:	lda     _objectAx
	sec
	sbc     _objectB_right
	sta     tmp1
	lda     tmp1
	beq     L0CA0
	bcs     L0CA3
L0CA0:	lda     _objectA_right
	cmp     _objectBx
	bcc     L0CA3
	lda     _objectAy
	sec
	sbc     _objectB_bottom
	sta     tmp1
	lda     tmp1
	beq     L0CA1
	bcs     L0CA3
L0CA1:	lda     _objectA_bottom
	cmp     _objectBy
	bcs     L0CA4
L0CA3:	rts
;
; ++collision;
;
L0CA4:	inc     _collision
;
; ++collision2;
;
	inc     _collision2
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Check_Each_Bullet (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Check_Each_Bullet: near

.segment	"CODE"

;
; if (Bullet1y < 0xf0){
;
	lda     _Bullet1y
	cmp     #$F0
	bcs     L0CA5
;
; collision2 = 0;
;
	lda     #$00
	sta     _collision2
;
; objectBx = Bullet1x;
;
	lda     _Bullet1x
	sta     _objectBx
;
; objectBy = Bullet1y;
;
	lda     _Bullet1y
	sta     _objectBy
;
; sizeBx = 0x12;
;
	lda     #$12
	sta     _sizeBx
;
; sizeBy = 0x5;
;
	lda     #$05
	sta     _sizeBy
;
; All_Collisions();
;
	jsr     _All_Collisions
;
; if (collision2 != 0)
;
	lda     _collision2
	beq     L0CA5
;
; Bullet1y = 0;
;
	lda     #$00
	sta     _Bullet1y
;
; if (Bullet2y < 0xf0){
;
L0CA5:	lda     _Bullet2y
	cmp     #$F0
	bcs     L0CA6
;
; collision2 = 0;
;
	lda     #$00
	sta     _collision2
;
; objectBx = Bullet2x;
;
	lda     _Bullet2x
	sta     _objectBx
;
; objectBy = Bullet2y;
;
	lda     _Bullet2y
	sta     _objectBy
;
; All_Collisions();
;
	jsr     _All_Collisions
;
; if (collision2 != 0)
;
	lda     _collision2
	beq     L0CA6
;
; Bullet2y = 0;
;
	lda     #$00
	sta     _Bullet2y
;
; if (Bullet3y < 0xf0){
;
L0CA6:	lda     _Bullet3y
	cmp     #$F0
	bcs     L0CA7
;
; collision2 = 0;
;
	lda     #$00
	sta     _collision2
;
; objectBx = Bullet3x;
;
	lda     _Bullet3x
	sta     _objectBx
;
; objectBy = Bullet3y;
;
	lda     _Bullet3y
	sta     _objectBy
;
; All_Collisions();
;
	jsr     _All_Collisions
;
; if (collision2 != 0)
;
	lda     _collision2
	beq     L0CA7
;
; Bullet3y = 0;
;
	lda     #$00
	sta     _Bullet3y
;
; if (Bullet4y < 0xf0){
;
L0CA7:	lda     _Bullet4y
	cmp     #$F0
	bcs     L0CA8
;
; collision2 = 0;
;
	lda     #$00
	sta     _collision2
;
; objectBx = Bullet4x;
;
	lda     _Bullet4x
	sta     _objectBx
;
; objectBy = Bullet4y;
;
	lda     _Bullet4y
	sta     _objectBy
;
; All_Collisions();
;
	jsr     _All_Collisions
;
; if (collision2 != 0)
;
	lda     _collision2
	beq     L0CA8
;
; Bullet4y = 0;
;
	lda     #$00
	sta     _Bullet4y
;
; if (Bullet5y < 0xf0){
;
L0CA8:	lda     _Bullet5y
	cmp     #$F0
	bcs     L0CA9
;
; collision2 = 0;
;
	lda     #$00
	sta     _collision2
;
; objectBx = Bullet5x;
;
	lda     _Bullet5x
	sta     _objectBx
;
; objectBy = Bullet5y;
;
	lda     _Bullet5y
	sta     _objectBy
;
; All_Collisions();
;
	jsr     _All_Collisions
;
; if (collision2 != 0)
;
	lda     _collision2
	beq     L0CA9
;
; Bullet5y = 0;
;
	lda     #$00
	sta     _Bullet5y
;
; if (Bullet6y < 0xf0){
;
L0CA9:	lda     _Bullet6y
	cmp     #$F0
	bcs     L0CAA
;
; collision2 = 0;
;
	lda     #$00
	sta     _collision2
;
; objectBx = Bullet6x;
;
	lda     _Bullet6x
	sta     _objectBx
;
; objectBy = Bullet6y;
;
	lda     _Bullet6y
	sta     _objectBy
;
; All_Collisions();
;
	jsr     _All_Collisions
;
; if (collision2 != 0)
;
	lda     _collision2
	beq     L0CAA
;
; Bullet6y = 0;
;
	lda     #$00
	sta     _Bullet6y
;
; if (Bullet7y < 0xf0){
;
L0CAA:	lda     _Bullet7y
	cmp     #$F0
	bcs     L0769
;
; collision2 = 0;
;
	lda     #$00
	sta     _collision2
;
; objectBx = Bullet7x;
;
	lda     _Bullet7x
	sta     _objectBx
;
; objectBy = Bullet7y;
;
	lda     _Bullet7y
	sta     _objectBy
;
; All_Collisions();
;
	jsr     _All_Collisions
;
; if (collision2 != 0)
;
	lda     _collision2
	beq     L0769
;
; Bullet7y = 0;
;
	lda     #$00
	sta     _Bullet7y
;
; }
;
L0769:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ collision_Test (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collision_Test: near

.segment	"CODE"

;
; if (Enemy1_Type != 0){ //zero = off
;
	lda     _Enemy1_Type
	beq     L0CAB
;
; objectAx = Enemy1x;
;
	lda     _Enemy1x
	sta     _objectAx
;
; objectAy = Enemy1y;
;
	lda     _Enemy1y
	sta     _objectAy
;
; sizeAx = 0x10;
;
	lda     #$10
	sta     _sizeAx
;
; sizeAy = 0x10;
;
	sta     _sizeAy
;
; collision = 0;
;
	lda     #$00
	sta     _collision
;
; Check_Each_Bullet();
;
	jsr     _Check_Each_Bullet
;
; if (collision != 0){
;
	lda     _collision
	beq     L0CAB
;
; Enemy1_Type = 0;
;
	lda     #$00
	sta     _Enemy1_Type
;
; ++Score3;
;
	inc     _Score3
;
; Play_Fx(2);
;
	lda     #$02
	jsr     _Play_Fx
;
; if (Enemy2_Type != 0){
;
L0CAB:	lda     _Enemy2_Type
	beq     L0CAC
;
; objectAx = Enemy2x;
;
	lda     _Enemy2x
	sta     _objectAx
;
; objectAy = Enemy2y;
;
	lda     _Enemy2y
	sta     _objectAy
;
; collision = 0;
;
	lda     #$00
	sta     _collision
;
; Check_Each_Bullet();
;
	jsr     _Check_Each_Bullet
;
; if (collision != 0){
;
	lda     _collision
	beq     L0CAC
;
; Enemy2_Type = 0;
;
	lda     #$00
	sta     _Enemy2_Type
;
; ++Score3;
;
	inc     _Score3
;
; Play_Fx(2);
;
	lda     #$02
	jsr     _Play_Fx
;
; if (Enemy3_Type != 0){
;
L0CAC:	lda     _Enemy3_Type
	beq     L0CAD
;
; objectAx = Enemy3x;
;
	lda     _Enemy3x
	sta     _objectAx
;
; objectAy = Enemy3y;
;
	lda     _Enemy3y
	sta     _objectAy
;
; collision = 0;
;
	lda     #$00
	sta     _collision
;
; Check_Each_Bullet();
;
	jsr     _Check_Each_Bullet
;
; if (collision != 0){
;
	lda     _collision
	beq     L0CAD
;
; Enemy3_Type = 0;
;
	lda     #$00
	sta     _Enemy3_Type
;
; ++Score3;
;
	inc     _Score3
;
; Play_Fx(2);
;
	lda     #$02
	jsr     _Play_Fx
;
; if (Enemy4_Type != 0){
;
L0CAD:	lda     _Enemy4_Type
	beq     L0CAF
;
; objectAx = Enemy4x;
;
	lda     _Enemy4x
	sta     _objectAx
;
; objectAy = Enemy4y;
;
	lda     _Enemy4y
	sta     _objectAy
;
; collision = 0;
;
	lda     #$00
	sta     _collision
;
; Check_Each_Bullet();
;
	jsr     _Check_Each_Bullet
;
; if (collision != 0){
;
	lda     _collision
	beq     L0CAF
;
; Enemy4_Type = 0;
;
	lda     #$00
	sta     _Enemy4_Type
;
; ++Score3;
;
	inc     _Score3
;
; Play_Fx(2);
;
	lda     #$02
	jsr     _Play_Fx
;
; collision = 0;
;
	lda     #$00
L0CAF:	sta     _collision
;
; objectBx = X1;
;
	lda     _X1
	sta     _objectBx
;
; objectBy = Y1;
;
	lda     _Y1
	sta     _objectBy
;
; sizeAx = 0x10;
;
	lda     #$10
	sta     _sizeAx
;
; sizeAy = 0x10;
;
	sta     _sizeAy
;
; sizeBx = 0x10;
;
	sta     _sizeBx
;
; sizeBy = 0x12;
;
	lda     #$12
	sta     _sizeBy
;
; if (Enemy1_Type != 0){
;
	lda     _Enemy1_Type
	beq     L0CB0
;
; objectAx = Enemy1x;
;
	lda     _Enemy1x
	sta     _objectAx
;
; objectAy = Enemy1y;
;
	lda     _Enemy1y
	sta     _objectAy
;
; All_Collisions();
;
	jsr     _All_Collisions
;
; if (Enemy2_Type != 0){
;
L0CB0:	lda     _Enemy2_Type
	beq     L0CB1
;
; objectAx = Enemy2x;
;
	lda     _Enemy2x
	sta     _objectAx
;
; objectAy = Enemy2y;
;
	lda     _Enemy2y
	sta     _objectAy
;
; All_Collisions();
;
	jsr     _All_Collisions
;
; if (Enemy3_Type != 0){
;
L0CB1:	lda     _Enemy3_Type
	beq     L0CB2
;
; objectAx = Enemy3x;
;
	lda     _Enemy3x
	sta     _objectAx
;
; objectAy = Enemy3y;
;
	lda     _Enemy3y
	sta     _objectAy
;
; All_Collisions();
;
	jsr     _All_Collisions
;
; if (Enemy4_Type != 0){
;
L0CB2:	lda     _Enemy4_Type
	beq     L0CB3
;
; objectAx = Enemy4x;
;
	lda     _Enemy4x
	sta     _objectAx
;
; objectAy = Enemy4y;
;
	lda     _Enemy4y
	sta     _objectAy
;
; All_Collisions();
;
	jsr     _All_Collisions
;
; if (collision != 0){
;
L0CB3:	lda     _collision
	beq     L07E3
;
; Play_Fx(2);
;
	lda     #$02
	jsr     _Play_Fx
;
; injury_Timer = 0x40;
;
	lda     #$40
	sta     _injury_Timer
;
; --Lives;
;
	dec     _Lives
;
; if (Lives == 0)
;
	bne     L07E3
;
; ++Death_Flag;
;
	inc     _Death_Flag
;
; }
;
L07E3:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Adjust_Score (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Adjust_Score: near

.segment	"CODE"

;
; if (Score3 > 9){
;
	lda     _Score3
	cmp     #$0A
	bcc     L0CB4
;
; ++Score2;
;
	inc     _Score2
;
; Score3 -= 10;
;
	lda     _Score3
	sec
	sbc     #$0A
	sta     _Score3
;
; if (Score2 > 9){
;
L0CB4:	lda     _Score2
	cmp     #$0A
	bcc     L0CB5
;
; ++Score1;
;
	inc     _Score1
;
; Score2 -= 10;
;
	lda     _Score2
	sec
	sbc     #$0A
	sta     _Score2
;
; if (Score1 > 9){
;
L0CB5:	lda     _Score1
	cmp     #$0A
	bcc     L07F1
;
; Score1 = 0;
;
	lda     #$00
	sta     _Score1
;
; Score2 = 0;
;
	sta     _Score2
;
; Score3 = 0;
;
	sta     _Score3
;
; }
;
L07F1:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Spawn_Enemies (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Spawn_Enemies: near

.segment	"CODE"

;
; temp = 0;
;
	lda     #$00
	sta     _temp
;
; if ((Frame_Count & 0x3f) == 1) //about every second
;
	lda     _Frame_Count
	and     #$3F
	cmp     #$01
	bne     L07FC
;
; ++Master_Clock;
;
	inc     _Master_Clock
;
; if (Master_Clock == Spawn_Timing[Spawn_Index]){
;
L07FC:	ldy     _Spawn_Index
	lda     _Spawn_Timing,y
	cmp     _Master_Clock
	bne     L0CB7
;
; temp = Spawn_Array[Spawn_Index];
;
	ldy     _Spawn_Index
	lda     _Spawn_Array,y
	sta     _temp
;
; ++Spawn_Index;
;
	inc     _Spawn_Index
;
; if (Spawn_Index > sizeof(Spawn_Timing))
;
	lda     _Spawn_Index
	cmp     #$2E
	bcc     L0CB7
;
; Spawn_Index = 0;
;
	lda     #$00
	sta     _Spawn_Index
;
; if (temp == 1){ //pattern 1
;
L0CB7:	lda     _temp
	cmp     #$01
	bne     L0CB8
;
; Enemy1_Type = 1;
;
	sta     _Enemy1_Type
;
; Enemy1x = 0x10;
;
	lda     #$10
	sta     _Enemy1x
;
; Enemy1y = 0x10;
;
	sta     _Enemy1y
;
; Enemy2_Type = 1;
;
	lda     #$01
	sta     _Enemy2_Type
;
; Enemy2x = 0x40;
;
	lda     #$40
	sta     _Enemy2x
;
; Enemy2y = 0;
;
	lda     #$00
	sta     _Enemy2y
;
; Enemy3_Type = 1;
;
	lda     #$01
	sta     _Enemy3_Type
;
; Enemy3x = 0xb0;
;
	lda     #$B0
	sta     _Enemy3x
;
; Enemy3y = 0x10;
;
	lda     #$10
	sta     _Enemy3y
;
; Enemy4_Type = 1;
;
	lda     #$01
	sta     _Enemy4_Type
;
; Enemy4x = 0xe0;
;
	lda     #$E0
	sta     _Enemy4x
;
; Enemy4y = 0;
;
	lda     #$00
	sta     _Enemy4y
;
; if (temp == 2){ //pattern 2
;
L0CB8:	lda     _temp
	cmp     #$02
	bne     L0CB9
;
; Enemy1_Type = 1;
;
	lda     #$01
	sta     _Enemy1_Type
;
; Enemy1x = 0x30;
;
	lda     #$30
	sta     _Enemy1x
;
; Enemy1y = 0x10;
;
	lda     #$10
	sta     _Enemy1y
;
; Enemy2_Type = 1;
;
	lda     #$01
	sta     _Enemy2_Type
;
; Enemy2x = 0x60;
;
	lda     #$60
	sta     _Enemy2x
;
; Enemy2y = 0;
;
	lda     #$00
	sta     _Enemy2y
;
; Enemy3_Type = 1;
;
	lda     #$01
	sta     _Enemy3_Type
;
; Enemy3x = 0xa0;
;
	lda     #$A0
	sta     _Enemy3x
;
; Enemy3y = 0;
;
	lda     #$00
	sta     _Enemy3y
;
; Enemy4_Type = 1;
;
	lda     #$01
	sta     _Enemy4_Type
;
; Enemy4x = 0xd0;
;
	lda     #$D0
	sta     _Enemy4x
;
; Enemy4y = 0x10;
;
	lda     #$10
	sta     _Enemy4y
;
; if (temp == 3){ //pattern 3
;
L0CB9:	lda     _temp
	cmp     #$03
	bne     L0CBA
;
; Enemy1_Type = 2;
;
	lda     #$02
	sta     _Enemy1_Type
;
; Enemy1x = 0x50;
;
	lda     #$50
	sta     _Enemy1x
;
; Enemy1y = 0;
;
	lda     #$00
	sta     _Enemy1y
;
; Enemy2_Type = 2;
;
	lda     #$02
	sta     _Enemy2_Type
;
; Enemy2x = 0xb0;
;
	lda     #$B0
	sta     _Enemy2x
;
; Enemy2y = 0;
;
	lda     #$00
	sta     _Enemy2y
;
; if (temp == 4){ //pattern 4
;
L0CBA:	lda     _temp
	cmp     #$04
	bne     L0CBB
;
; Enemy1_Type = 2;
;
	lda     #$02
	sta     _Enemy1_Type
;
; Enemy1x = 0x18;
;
	lda     #$18
	sta     _Enemy1x
;
; Enemy1y = 0x10;
;
	lda     #$10
	sta     _Enemy1y
;
; Enemy2_Type = 1;
;
	lda     #$01
	sta     _Enemy2_Type
;
; Enemy2x = 0x80;
;
	lda     #$80
	sta     _Enemy2x
;
; Enemy2y = 0;
;
	lda     #$00
	sta     _Enemy2y
;
; Enemy3_Type = 2;
;
	lda     #$02
	sta     _Enemy3_Type
;
; Enemy3x = 0xc8;
;
	lda     #$C8
	sta     _Enemy3x
;
; Enemy3y = 0x10;
;
	lda     #$10
	sta     _Enemy3y
;
; if (temp == 5){ //pattern 5
;
L0CBB:	lda     _temp
	cmp     #$05
	bne     L0865
;
; Enemy1_Type = 2;
;
	lda     #$02
	sta     _Enemy1_Type
;
; Enemy1x = 0x10;
;
	lda     #$10
	sta     _Enemy1x
;
; Enemy1y = 0x10;
;
	sta     _Enemy1y
;
; Enemy2_Type = 2;
;
	lda     #$02
	sta     _Enemy2_Type
;
; Enemy2x = 0xd8;
;
	lda     #$D8
	sta     _Enemy2x
;
; Enemy2y = 8;
;
	lda     #$08
	sta     _Enemy2y
;
; Enemy3_Type = 1;
;
	lda     #$01
	sta     _Enemy3_Type
;
; Enemy3x = 0x50;
;
	lda     #$50
	sta     _Enemy3x
;
; Enemy3y = 0;
;
	lda     #$00
	sta     _Enemy3y
;
; Enemy4_Type = 2;
;
	lda     #$02
	sta     _Enemy4_Type
;
; Enemy4x = 0x80;
;
	lda     #$80
	sta     _Enemy4x
;
; Enemy4y = 0x10;
;
	lda     #$10
	sta     _Enemy4y
;
; }
;
L0865:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Boss_Init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Boss_Init: near

.segment	"CODE"

;
; Boss_Health = 0x20;
;
	lda     #$20
	sta     _Boss_Health
;
; BossX = 40;
;
	lda     #$28
	sta     _BossX
;
; Boss_Laser_1y = 0xf8;
;
	lda     #$F8
	sta     _Boss_Laser_1y
;
; Boss_Laser_2y = 0xf8;
;
	sta     _Boss_Laser_2y
;
; Boss_Laser_3y = 0xf8;
;
	sta     _Boss_Laser_3y
;
; Boss_Laser_4y = 0xf8;
;
	sta     _Boss_Laser_4y
;
; memcpy (SPRITES2+0x40, Boss_Start_Sprites, sizeof(Boss_Start_Sprites));//0x78
;
	ldy     #$77
L0909:	lda     _Boss_Start_Sprites,y
	sta     _SPRITES2+64,y
	dey
	bpl     L0909
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Shuffle_Sprites2 (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Shuffle_Sprites2: near

.segment	"CODE"

;
; memcpy (SPRITES2, SPRITE_BULLET, 0x40);
;
	ldy     #$3F
L090F:	lda     _SPRITE_BULLET,y
	sta     _SPRITES2,y
	dey
	bpl     L090F
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Boss_Moves (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Boss_Moves: near

.segment	"CODE"

;
; if (Boss_Count == 0){
;
	lda     _Boss_Count
	bne     L0CBE
;
; ++Boss_Move;
;
	inc     _Boss_Move
;
; Boss_Count = 0x40;
;
	lda     #$40
	sta     _Boss_Count
;
; if (Boss_Move == 4)
;
	lda     _Boss_Move
	cmp     #$04
	bne     L0CBF
;
; Boss_Move = 0;
;
	lda     #$00
	sta     _Boss_Move
;
; else{
;
	jmp     L0CBF
;
; --Boss_Count;
;
L0CBE:	dec     _Boss_Count
;
; if (Boss_Move == 0){
;
L0CBF:	lda     _Boss_Move
	bne     L0CC0
;
; --BossX;
;
	dec     _BossX
;
; --BossX;
;
	dec     _BossX
;
; else if (Boss_Move == 1){
;
	jmp     L0CC3
L0CC0:	lda     _Boss_Move
	cmp     #$01
	bne     L0CC1
;
; Play_Fx(1);
;
	jsr     _Play_Fx
;
; SFx_Wait = 0x10;
;
	lda     #$10
	sta     _SFx_Wait
;
; Boss_Laser_1x = 0x35;
;
	lda     #$35
	sta     _Boss_Laser_1x
;
; Boss_Laser_1y = 0x3a;
;
	lda     #$3A
	sta     _Boss_Laser_1y
;
; Boss_Laser_2x = 0x48;
;
	lda     #$48
	sta     _Boss_Laser_2x
;
; Boss_Laser_2y = 0x3a;
;
	lda     #$3A
	sta     _Boss_Laser_2y
;
; ++Boss_Move;
;
	inc     _Boss_Move
;
; else if (Boss_Move == 2){
;
	jmp     L0CC3
L0CC1:	lda     _Boss_Move
	cmp     #$02
	bne     L0CC2
;
; ++BossX;
;
	inc     _BossX
;
; ++BossX;
;
	inc     _BossX
;
; else if (Boss_Move == 3){
;
	jmp     L0CC3
L0CC2:	lda     _Boss_Move
	cmp     #$03
	bne     L0CC3
;
; Play_Fx(1);
;
	lda     #$01
	jsr     _Play_Fx
;
; SFx_Wait = 0x10;
;
	lda     #$10
	sta     _SFx_Wait
;
; Boss_Laser_3x = 0xb6;
;
	lda     #$B6
	sta     _Boss_Laser_3x
;
; Boss_Laser_3y = 0x3a;
;
	lda     #$3A
	sta     _Boss_Laser_3y
;
; Boss_Laser_4x = 0xc8;
;
	lda     #$C8
	sta     _Boss_Laser_4x
;
; Boss_Laser_4y = 0x3a;
;
	lda     #$3A
	sta     _Boss_Laser_4y
;
; Boss_Move = 0;
;
	lda     #$00
	sta     _Boss_Move
;
; if(SFx_Wait != 0)
;
L0CC3:	lda     _SFx_Wait
	beq     L0CC4
;
; --SFx_Wait;
;
	dec     _SFx_Wait
;
; SPRITES2[0x43] = BossX;
;
L0CC4:	lda     _BossX
	sta     _SPRITES2+67
;
; SPRITES2[0x5b] = BossX;
;
	lda     _BossX
	sta     _SPRITES2+91
;
; SPRITES2[0x73] = BossX;
;
	lda     _BossX
	sta     _SPRITES2+115
;
; SPRITES2[0x8b] = BossX;
;
	lda     _BossX
	sta     _SPRITES2+139
;
; SPRITES2[0xa3] = BossX;
;
	lda     _BossX
	sta     _SPRITES2+163
;
; temp = BossX + 8;
;
	lda     _BossX
	clc
	adc     #$08
	sta     _temp
;
; SPRITES2[0x47] = temp;
;
	sta     _SPRITES2+71
;
; SPRITES2[0x5f] = temp;
;
	lda     _temp
	sta     _SPRITES2+95
;
; SPRITES2[0x77] = temp;
;
	lda     _temp
	sta     _SPRITES2+119
;
; SPRITES2[0x8f] = temp;
;
	lda     _temp
	sta     _SPRITES2+143
;
; SPRITES2[0xa7] = temp;
;
	lda     _temp
	sta     _SPRITES2+167
;
; temp += 8;
;
	lda     #$08
	clc
	adc     _temp
	sta     _temp
;
; SPRITES2[0x4b] = temp;
;
	sta     _SPRITES2+75
;
; SPRITES2[0x63] = temp;
;
	lda     _temp
	sta     _SPRITES2+99
;
; SPRITES2[0x7b] = temp;
;
	lda     _temp
	sta     _SPRITES2+123
;
; SPRITES2[0x93] = temp;
;
	lda     _temp
	sta     _SPRITES2+147
;
; SPRITES2[0xab] = temp;
;
	lda     _temp
	sta     _SPRITES2+171
;
; temp += 8;
;
	lda     #$08
	clc
	adc     _temp
	sta     _temp
;
; SPRITES2[0x4f] = temp;
;
	sta     _SPRITES2+79
;
; SPRITES2[0x67] = temp;
;
	lda     _temp
	sta     _SPRITES2+103
;
; SPRITES2[0x7f] = temp;
;
	lda     _temp
	sta     _SPRITES2+127
;
; SPRITES2[0x97] = temp;
;
	lda     _temp
	sta     _SPRITES2+151
;
; SPRITES2[0xaf] = temp;
;
	lda     _temp
	sta     _SPRITES2+175
;
; temp += 8;
;
	lda     #$08
	clc
	adc     _temp
	sta     _temp
;
; SPRITES2[0x53] = temp;
;
	sta     _SPRITES2+83
;
; SPRITES2[0x6b] = temp;
;
	lda     _temp
	sta     _SPRITES2+107
;
; SPRITES2[0x83] = temp;
;
	lda     _temp
	sta     _SPRITES2+131
;
; SPRITES2[0x9b] = temp;
;
	lda     _temp
	sta     _SPRITES2+155
;
; SPRITES2[0xb3] = temp;
;
	lda     _temp
	sta     _SPRITES2+179
;
; temp += 8;
;
	lda     #$08
	clc
	adc     _temp
	sta     _temp
;
; SPRITES2[0x57] = temp;
;
	sta     _SPRITES2+87
;
; SPRITES2[0x6f] = temp;
;
	lda     _temp
	sta     _SPRITES2+111
;
; SPRITES2[0x87] = temp;
;
	lda     _temp
	sta     _SPRITES2+135
;
; SPRITES2[0x9f] = temp;
;
	lda     _temp
	sta     _SPRITES2+159
;
; SPRITES2[0xb7] = temp;
;
	lda     _temp
	sta     _SPRITES2+183
;
; if (Boss_Laser_1y < 0xf0){
;
	lda     _Boss_Laser_1y
	cmp     #$F0
	bcs     L0CC5
;
; ++Boss_Laser_1y;
;
	inc     _Boss_Laser_1y
;
; ++Boss_Laser_1y;
;
	inc     _Boss_Laser_1y
;
; SPRITE_TEXT[0] = Boss_Laser_1y;
;
	lda     _Boss_Laser_1y
	sta     _SPRITE_TEXT
;
; SPRITE_TEXT[1] = 0x80;
;
	lda     #$80
	sta     _SPRITE_TEXT+1
;
; SPRITE_TEXT[2] = 1;
;
	lda     #$01
	sta     _SPRITE_TEXT+2
;
; SPRITE_TEXT[3] = Boss_Laser_1x;
;
	lda     _Boss_Laser_1x
	sta     _SPRITE_TEXT+3
;
; SPRITE_TEXT[4] = Boss_Laser_1y + 8;
;
	lda     _Boss_Laser_1y
	clc
	adc     #$08
	sta     _SPRITE_TEXT+4
;
; SPRITE_TEXT[5] = 0x90;
;
	lda     #$90
	sta     _SPRITE_TEXT+5
;
; SPRITE_TEXT[6] = 1;
;
	lda     #$01
	sta     _SPRITE_TEXT+6
;
; SPRITE_TEXT[7] = Boss_Laser_1x;
;
	lda     _Boss_Laser_1x
	sta     _SPRITE_TEXT+7
;
; else {
;
	jmp     L0CC6
;
; SPRITE_TEXT[0] = 0xf8;
;
L0CC5:	lda     #$F8
	sta     _SPRITE_TEXT
;
; SPRITE_TEXT[4] = 0xf8;
;
	sta     _SPRITE_TEXT+4
;
; if (Boss_Laser_2y < 0xf0){
;
L0CC6:	lda     _Boss_Laser_2y
	cmp     #$F0
	bcs     L0CC8
;
; ++Boss_Laser_2y;
;
	inc     _Boss_Laser_2y
;
; ++Boss_Laser_2y;
;
	inc     _Boss_Laser_2y
;
; if (Boss_Laser_2x < X1){ //one laser chases you
;
	lda     _Boss_Laser_2x
	cmp     _X1
	bcs     L0CC7
;
; ++Boss_Laser_2x;
;
	inc     _Boss_Laser_2x
;
; else {
;
	jmp     L0CBC
;
; --Boss_Laser_2x;
;
L0CC7:	dec     _Boss_Laser_2x
;
; SPRITE_TEXT[8] = Boss_Laser_2y;
;
L0CBC:	lda     _Boss_Laser_2y
	sta     _SPRITE_TEXT+8
;
; SPRITE_TEXT[9] = 0x80;
;
	lda     #$80
	sta     _SPRITE_TEXT+9
;
; SPRITE_TEXT[10] = 1;
;
	lda     #$01
	sta     _SPRITE_TEXT+10
;
; SPRITE_TEXT[11] = Boss_Laser_2x;
;
	lda     _Boss_Laser_2x
	sta     _SPRITE_TEXT+11
;
; SPRITE_TEXT[12] = Boss_Laser_2y + 8;
;
	lda     _Boss_Laser_2y
	clc
	adc     #$08
	sta     _SPRITE_TEXT+12
;
; SPRITE_TEXT[13] = 0x90;
;
	lda     #$90
	sta     _SPRITE_TEXT+13
;
; SPRITE_TEXT[14] = 1;
;
	lda     #$01
	sta     _SPRITE_TEXT+14
;
; SPRITE_TEXT[15] = Boss_Laser_2x;
;
	lda     _Boss_Laser_2x
	sta     _SPRITE_TEXT+15
;
; else {
;
	jmp     L0CC9
;
; SPRITE_TEXT[8] = 0xf8;
;
L0CC8:	lda     #$F8
	sta     _SPRITE_TEXT+8
;
; SPRITE_TEXT[12] = 0xf8;
;
	sta     _SPRITE_TEXT+12
;
; if (Boss_Laser_3y < 0xf0){
;
L0CC9:	lda     _Boss_Laser_3y
	cmp     #$F0
	bcs     L0CCB
;
; ++Boss_Laser_3y;
;
	inc     _Boss_Laser_3y
;
; ++Boss_Laser_3y;
;
	inc     _Boss_Laser_3y
;
; if (Boss_Laser_3x < X1){ //one laser chases you
;
	lda     _Boss_Laser_3x
	cmp     _X1
	bcs     L0CCA
;
; ++Boss_Laser_3x;
;
	inc     _Boss_Laser_3x
;
; else {
;
	jmp     L0CBD
;
; --Boss_Laser_3x;
;
L0CCA:	dec     _Boss_Laser_3x
;
; SPRITE_TEXT[16] = Boss_Laser_3y;
;
L0CBD:	lda     _Boss_Laser_3y
	sta     _SPRITE_TEXT+16
;
; SPRITE_TEXT[17] = 0x80;
;
	lda     #$80
	sta     _SPRITE_TEXT+17
;
; SPRITE_TEXT[18] = 1;
;
	lda     #$01
	sta     _SPRITE_TEXT+18
;
; SPRITE_TEXT[19] = Boss_Laser_3x;
;
	lda     _Boss_Laser_3x
	sta     _SPRITE_TEXT+19
;
; SPRITE_TEXT[20] = Boss_Laser_3y + 8;
;
	lda     _Boss_Laser_3y
	clc
	adc     #$08
	sta     _SPRITE_TEXT+20
;
; SPRITE_TEXT[21] = 0x90;
;
	lda     #$90
	sta     _SPRITE_TEXT+21
;
; SPRITE_TEXT[22] = 1;
;
	lda     #$01
	sta     _SPRITE_TEXT+22
;
; SPRITE_TEXT[23] = Boss_Laser_3x;
;
	lda     _Boss_Laser_3x
	sta     _SPRITE_TEXT+23
;
; else {
;
	jmp     L0CCC
;
; SPRITE_TEXT[16] = 0xf8;
;
L0CCB:	lda     #$F8
	sta     _SPRITE_TEXT+16
;
; SPRITE_TEXT[20] = 0xf8;
;
	sta     _SPRITE_TEXT+20
;
; if (Boss_Laser_4y < 0xf0){
;
L0CCC:	lda     _Boss_Laser_4y
	cmp     #$F0
	bcs     L0CCD
;
; ++Boss_Laser_4y;
;
	inc     _Boss_Laser_4y
;
; ++Boss_Laser_4y;
;
	inc     _Boss_Laser_4y
;
; SPRITE_SHIP[24] = Boss_Laser_4y;
;
	lda     _Boss_Laser_4y
	sta     _SPRITE_SHIP+24
;
; SPRITE_SHIP[25] = 0x80;
;
	lda     #$80
	sta     _SPRITE_SHIP+25
;
; SPRITE_SHIP[26] = 1;
;
	lda     #$01
	sta     _SPRITE_SHIP+26
;
; SPRITE_SHIP[27] = Boss_Laser_4x;
;
	lda     _Boss_Laser_4x
	sta     _SPRITE_SHIP+27
;
; SPRITE_SHIP[28] = Boss_Laser_4y + 8;
;
	lda     _Boss_Laser_4y
	clc
	adc     #$08
	sta     _SPRITE_SHIP+28
;
; SPRITE_SHIP[29] = 0x90;
;
	lda     #$90
	sta     _SPRITE_SHIP+29
;
; SPRITE_SHIP[30] = 1;
;
	lda     #$01
	sta     _SPRITE_SHIP+30
;
; SPRITE_SHIP[31] = Boss_Laser_4x;
;
	lda     _Boss_Laser_4x
	sta     _SPRITE_SHIP+31
;
; else {
;
	rts
;
; SPRITE_SHIP[24] = 0xf8;
;
L0CCD:	lda     #$F8
	sta     _SPRITE_SHIP+24
;
; SPRITE_SHIP[28] = 0xf8;
;
	sta     _SPRITE_SHIP+28
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ collision_Boss (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_collision_Boss: near

.segment	"CODE"

;
; objectAx = BossX;
;
	lda     _BossX
	sta     _objectAx
;
; objectAy = 0x28;
;
	lda     #$28
	sta     _objectAy
;
; sizeAx = 0x30;
;
	lda     #$30
	sta     _sizeAx
;
; sizeAy = 0x28;
;
	lda     #$28
	sta     _sizeAy
;
; collision = 0;
;
	lda     #$00
	sta     _collision
;
; Check_Each_Bullet();
;
	jsr     _Check_Each_Bullet
;
; if (collision != 0){
;
	lda     _collision
	beq     L0CCE
;
; --Boss_Health;
;
	dec     _Boss_Health
;
; if(Boss_Health == 0){
;
L0CCE:	lda     _Boss_Health
	bne     L0CCF
;
; Play_Fx(3);
;
	lda     #$03
	jsr     _Play_Fx
;
; ++Victory_Flag;
;
	inc     _Victory_Flag
;
; collision = 0;
;
L0CCF:	lda     #$00
	sta     _collision
;
; objectAx = Boss_Laser_1x;
;
	lda     _Boss_Laser_1x
	sta     _objectAx
;
; objectAy = Boss_Laser_1y;
;
	lda     _Boss_Laser_1y
	sta     _objectAy
;
; sizeAx = 0x3;
;
	lda     #$03
	sta     _sizeAx
;
; sizeAy = 0x10;
;
	lda     #$10
	sta     _sizeAy
;
; objectBx = X1;
;
	lda     _X1
	sta     _objectBx
;
; objectBy = Y1;
;
	lda     _Y1
	sta     _objectBy
;
; sizeBx = 0x10;
;
	lda     #$10
	sta     _sizeBx
;
; sizeBy = 0x12;
;
	lda     #$12
	sta     _sizeBy
;
; All_Collisions();
;
	jsr     _All_Collisions
;
; objectAx = Boss_Laser_2x;
;
	lda     _Boss_Laser_2x
	sta     _objectAx
;
; objectAy = Boss_Laser_2y;
;
	lda     _Boss_Laser_2y
	sta     _objectAy
;
; sizeAx = 0x3;
;
	lda     #$03
	sta     _sizeAx
;
; sizeAy = 0x10;
;
	lda     #$10
	sta     _sizeAy
;
; All_Collisions();
;
	jsr     _All_Collisions
;
; objectAx = Boss_Laser_3x;
;
	lda     _Boss_Laser_3x
	sta     _objectAx
;
; objectAy = Boss_Laser_3y;
;
	lda     _Boss_Laser_3y
	sta     _objectAy
;
; sizeAx = 0x3;
;
	lda     #$03
	sta     _sizeAx
;
; sizeAy = 0x10;
;
	lda     #$10
	sta     _sizeAy
;
; All_Collisions();
;
	jsr     _All_Collisions
;
; objectAx = Boss_Laser_4x;
;
	lda     _Boss_Laser_4x
	sta     _objectAx
;
; objectAy = Boss_Laser_4y;
;
	lda     _Boss_Laser_4y
	sta     _objectAy
;
; sizeAx = 0x3;
;
	lda     #$03
	sta     _sizeAx
;
; sizeAy = 0x10;
;
	lda     #$10
	sta     _sizeAy
;
; All_Collisions();
;
	jsr     _All_Collisions
;
; if (collision != 0){
;
	lda     _collision
	beq     L0A91
;
; Play_Fx(2);
;
	lda     #$02
	jsr     _Play_Fx
;
; injury_Timer = 0x54;
;
	lda     #$54
	sta     _injury_Timer
;
; --Lives;
;
	dec     _Lives
;
; if (Lives == 0)
;
	bne     L0A91
;
; ++Death_Flag;
;
	inc     _Death_Flag
;
; }
;
L0A91:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ Restore_Boss_Y (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Restore_Boss_Y: near

.segment	"CODE"

;
; SPRITES2[0x40] = 0x28;
;
	lda     #$28
	sta     _SPRITES2+64
;
; SPRITES2[0x44] = 0x28;
;
	sta     _SPRITES2+68
;
; SPRITES2[0x48] = 0x28;
;
	sta     _SPRITES2+72
;
; SPRITES2[0x4c] = 0x28;
;
	sta     _SPRITES2+76
;
; SPRITES2[0x50] = 0x28;
;
	sta     _SPRITES2+80
;
; SPRITES2[0x54] = 0x28;
;
	sta     _SPRITES2+84
;
; SPRITES2[0x58] = 0x30;
;
	lda     #$30
	sta     _SPRITES2+88
;
; SPRITES2[0x5c] = 0x30;
;
	sta     _SPRITES2+92
;
; SPRITES2[0x60] = 0x30;
;
	sta     _SPRITES2+96
;
; SPRITES2[0x64] = 0x30;
;
	sta     _SPRITES2+100
;
; SPRITES2[0x68] = 0x30;
;
	sta     _SPRITES2+104
;
; SPRITES2[0x6c] = 0x30;
;
	sta     _SPRITES2+108
;
; SPRITES2[0x70] = 0x38;
;
	lda     #$38
	sta     _SPRITES2+112
;
; SPRITES2[0x74] = 0x38;
;
	sta     _SPRITES2+116
;
; SPRITES2[0x78] = 0x38;
;
	sta     _SPRITES2+120
;
; SPRITES2[0x7c] = 0x38;
;
	sta     _SPRITES2+124
;
; SPRITES2[0x80] = 0x38;
;
	sta     _SPRITES2+128
;
; SPRITES2[0x84] = 0x38;
;
	sta     _SPRITES2+132
;
; SPRITES2[0x88] = 0x40;
;
	lda     #$40
	sta     _SPRITES2+136
;
; SPRITES2[0x8c] = 0x40;
;
	sta     _SPRITES2+140
;
; SPRITES2[0x90] = 0x40;
;
	sta     _SPRITES2+144
;
; SPRITES2[0x94] = 0x40;
;
	sta     _SPRITES2+148
;
; SPRITES2[0x98] = 0x40;
;
	sta     _SPRITES2+152
;
; SPRITES2[0x9c] = 0x40;
;
	sta     _SPRITES2+156
;
; SPRITES2[0xa0] = 0x48;
;
	lda     #$48
	sta     _SPRITES2+160
;
; SPRITES2[0xa4] = 0x48;
;
	sta     _SPRITES2+164
;
; SPRITES2[0xa8] = 0x48;
;
	sta     _SPRITES2+168
;
; SPRITES2[0xac] = 0x48;
;
	sta     _SPRITES2+172
;
; SPRITES2[0xb0] = 0x48;
;
	sta     _SPRITES2+176
;
; SPRITES2[0xb4] = 0x48;
;
	sta     _SPRITES2+180
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; All_Off(); //turn off screen
;
	jsr     _All_Off
;
; Draw_Title();
;
	jsr     _Draw_Title
;
; X1 = 0x80;
;
	lda     #$80
	sta     _X1
;
; Y1 = 0xd0; //bottom of screen
;
	lda     #$D0
	sta     _Y1
;
; Wait = 0;
;
	lda     #$00
	sta     _Wait
;
; Wait2 = 0;
;
	sta     _Wait2
;
; Lives = 3;
;
	lda     #$03
	sta     _Lives
;
; joypad1 = 0xff; //fix a bug, reset is wiping joypad1old
;
	lda     #$FF
	sta     _joypad1
;
; Load_Palette();
;
	jsr     _Load_Palette
;
; Reset_Scroll();
;
	jsr     _Reset_Scroll
;
; Reset_Music(); //note, this is famitone init, and I added the music data address. see famitone2.s
;
	jsr     _Reset_Music
;
; Play_Music(song);//song = 0
;
	lda     _song
	jsr     _Play_Music
;
; Wait_Vblank();
;
	jsr     _Wait_Vblank
;
; All_On();
;
	jsr     _All_On
;
; while (Game_Mode == TITLE_MODE){ //Title Screen
;
	jmp     L0CD3
;
; while (NMI_flag == 0);//wait till NMI
;
L0CD0:	lda     _NMI_flag
	beq     L0CD0
;
; NMI_flag = 0;
;
	lda     #$00
	sta     _NMI_flag
;
; every_frame(); //get input
;
	jsr     _every_frame
;
; if (((joypad1old & START) == 0)&&((joypad1 & START) != 0)){
;
	lda     _joypad1old
	and     #$10
	bne     L0B14
	lda     _joypad1
	and     #$10
	beq     L0B14
;
; Game_Mode = RUN_GAME_MODE;
;
	lda     #$01
	sta     _Game_Mode
;
; Set_Sprite_Zero();
;
	jsr     _Set_Sprite_Zero
;
; Draw_Background();
;
	jsr     _Draw_Background
;
; Reset_Music();
;
	jsr     _Reset_Music
;
; song = 1;
;
	lda     #$01
	sta     _song
;
; Play_Music(song);
;
	jsr     _Play_Music
;
; Music_Update();
;
L0B14:	jsr     _Music_Update
;
; while (Game_Mode == TITLE_MODE){ //Title Screen
;
L0CD3:	lda     _Game_Mode
	beq     L0CD0
;
; while (Game_Mode == RUN_GAME_MODE){ //Game Mode
;
	jmp     L0CD9
;
; while (NMI_flag == 0);//wait till NMI
;
L0CD4:	lda     _NMI_flag
	beq     L0CD4
;
; NMI_flag = 0;
;
	lda     #$00
	sta     _NMI_flag
;
; every_frame2(); //should be done first every v-blank
;
	jsr     _every_frame2
;
; Vert_scroll2 = ((Vert_scroll & 0xF8) << 2);
;
	lda     _Vert_scroll
	and     #$F8
	asl     a
	asl     a
	sta     _Vert_scroll2
;
; Sprite_Zero();
;
	jsr     _Sprite_Zero
;
; PPU_ADDRESS = 0;
;
	lda     #$00
	sta     $2006
;
; SCROLL = Vert_scroll;
;
	lda     _Vert_scroll
	sta     $2005
;
; SCROLL = 0;
;
	lda     #$00
	sta     $2005
;
; PPU_ADDRESS = Vert_scroll2;
;
	lda     _Vert_scroll2
	sta     $2006
;
; Spawn_Enemies();
;
	jsr     _Spawn_Enemies
;
; move_logic();
;
	jsr     _move_logic
;
; if (injury_Timer == 0)
;
	lda     _injury_Timer
	bne     L0B46
;
; collision_Test();
;
	jsr     _collision_Test
;
; Adjust_Score();
;
L0B46:	jsr     _Adjust_Score
;
; update_Sprites();
;
	jsr     _update_Sprites
;
; Shuffle_Sprites();
;
	jsr     _Shuffle_Sprites
;
; Music_Update();
;
	jsr     _Music_Update
;
; if (((joypad1old & START) == 0)&&((joypad1 & START) != 0)){
;
	lda     _joypad1old
	and     #$10
	bne     L0CD7
	lda     _joypad1
	and     #$10
	beq     L0CD7
;
; Blank_sprite3();
;
	jsr     _Blank_sprite3
;
; Turn_On_Pause_Sprites();
;
	jsr     _Turn_On_Pause_Sprites
;
; Reset_Music();
;
	jsr     _Reset_Music
;
; song = 2;
;
	lda     #$02
	sta     _song
;
; Play_Music(song);
;
	jsr     _Play_Music
;
; Game_Mode = PAUSE_MODE;
;
	lda     #$02
	sta     _Game_Mode
;
; if (Master_Clock >= 0x72){
;
L0CD7:	lda     _Master_Clock
	cmp     #$72
	bcc     L0CD8
;
; Blank_sprite3();
;
	jsr     _Blank_sprite3
;
; Set_Sprite_Zero();
;
	jsr     _Set_Sprite_Zero
;
; Boss_Init();
;
	jsr     _Boss_Init
;
; Game_Mode = BOSS_MODE;
;
	lda     #$05
	sta     _Game_Mode
;
; if (Death_Flag != 0){
;
L0CD8:	lda     _Death_Flag
	beq     L0CD9
;
; Blank_sprite3();
;
	jsr     _Blank_sprite3
;
; Turn_On_Game_Over_Sprites();
;
	jsr     _Turn_On_Game_Over_Sprites
;
; Reset_Music();
;
	jsr     _Reset_Music
;
; song = 3;
;
	lda     #$03
	sta     _song
;
; Play_Music(song);
;
	jsr     _Play_Music
;
; Game_Mode = GAME_OVER_MODE;
;
	lda     #$03
	sta     _Game_Mode
;
; while (Game_Mode == RUN_GAME_MODE){ //Game Mode
;
L0CD9:	lda     _Game_Mode
	cmp     #$01
	jeq     L0CD4
;
; while (Game_Mode == PAUSE_MODE){ //Pause 
;
	jmp     L0CDE
;
; while (NMI_flag == 0);//wait till NMI
;
L0CDA:	lda     _NMI_flag
	beq     L0CDA
;
; NMI_flag = 0;
;
	lda     #$00
	sta     _NMI_flag
;
; every_frame();
;
	jsr     _every_frame
;
; Music_Update();
;
	jsr     _Music_Update
;
; if (((joypad1old & START) == 0)&&((joypad1 & START) != 0)){
;
	lda     _joypad1old
	and     #$10
	bne     L0CDE
	lda     _joypad1
	and     #$10
	beq     L0CDE
;
; Blank_sprite3();
;
	jsr     _Blank_sprite3
;
; Set_Sprite_Zero();
;
	jsr     _Set_Sprite_Zero
;
; Reset_Music();
;
	jsr     _Reset_Music
;
; song = 1;
;
	lda     #$01
	sta     _song
;
; Play_Music(song);
;
	jsr     _Play_Music
;
; if (Master_Clock < 0x72){
;
	lda     _Master_Clock
	cmp     #$72
	bcs     L0CDD
;
; Game_Mode=RUN_GAME_MODE;
;
	lda     #$01
	sta     _Game_Mode
;
; else {
;
	jmp     L0CDE
;
; Game_Mode=BOSS_MODE;
;
L0CDD:	lda     #$05
	sta     _Game_Mode
;
; Restore_Boss_Y();
;
	jsr     _Restore_Boss_Y
;
; while (Game_Mode == PAUSE_MODE){ //Pause 
;
L0CDE:	lda     _Game_Mode
	cmp     #$02
	beq     L0CDA
;
; while (Game_Mode == GAME_OVER_MODE){ //Game Over
;
	jmp     L0CE1
;
; while (NMI_flag == 0);//wait till NMI
;
L0CDF:	lda     _NMI_flag
	beq     L0CDF
;
; NMI_flag = 0;
;
	lda     #$00
	sta     _NMI_flag
;
; every_frame();
;
	jsr     _every_frame
;
; Music_Update();
;
	jsr     _Music_Update
;
; ++Wait;
;
	inc     _Wait
;
; if (Wait == 0)
;
	bne     L0CE0
;
; ++Wait2;
;
	inc     _Wait2
;
; if (Wait2 == 2){
;
L0CE0:	lda     _Wait2
	cmp     #$02
	bne     L0CE1
;
; All_Off();
;
	jsr     _All_Off
;
; Reset();
;
	jsr     _Reset
;
; while (Game_Mode == GAME_OVER_MODE){ //Game Over
;
L0CE1:	lda     _Game_Mode
	cmp     #$03
	beq     L0CDF
;
; while (Game_Mode == VICTORY_MODE){ //Victory
;
	jmp     L0CE5
;
; while (NMI_flag == 0);//wait till NMI
;
L0CE2:	lda     _NMI_flag
	beq     L0CE2
;
; NMI_flag = 0;
;
	lda     #$00
	sta     _NMI_flag
;
; every_frame();
;
	jsr     _every_frame
;
; Music_Update();
;
	jsr     _Music_Update
;
; if (((joypad1old & START) == 0)&&((joypad1 & START) != 0)){
;
	lda     _joypad1old
	and     #$10
	bne     L0CE5
	lda     _joypad1
	and     #$10
	beq     L0CE5
;
; All_Off();
;
	jsr     _All_Off
;
; Reset();
;
	jsr     _Reset
;
; while (Game_Mode == VICTORY_MODE){ //Victory
;
L0CE5:	lda     _Game_Mode
	cmp     #$04
	beq     L0CE2
;
; while (Game_Mode == BOSS_MODE){ //Boss Mode
;
	jmp     L0CED
;
; while (NMI_flag == 0);//wait till NMI
;
L0CE6:	lda     _NMI_flag
	beq     L0CE6
;
; NMI_flag = 0;
;
	lda     #$00
	sta     _NMI_flag
;
; every_frame2(); //should be done first every v-blank
;
	jsr     _every_frame2
;
; Vert_scroll2 = ((Vert_scroll & 0xF8) << 2);
;
	lda     _Vert_scroll
	and     #$F8
	asl     a
	asl     a
	sta     _Vert_scroll2
;
; Sprite_Zero();
;
	jsr     _Sprite_Zero
;
; PPU_ADDRESS = 0;
;
	lda     #$00
	sta     $2006
;
; SCROLL = Vert_scroll;
;
	lda     _Vert_scroll
	sta     $2005
;
; SCROLL = 0;
;
	lda     #$00
	sta     $2005
;
; PPU_ADDRESS = Vert_scroll2;
;
	lda     _Vert_scroll2
	sta     $2006
;
; if (Victory_Flag == 0){
;
	lda     _Victory_Flag
	bne     L0CE9
;
; move_logic();
;
	jsr     _move_logic
;
; Boss_Moves();
;
	jsr     _Boss_Moves
;
; if (injury_Timer == 0)
;
	lda     _injury_Timer
	bne     L0BE3
;
; collision_Boss();
;
	jsr     _collision_Boss
;
; update_Sprites();
;
L0BE3:	jsr     _update_Sprites
;
; Shuffle_Sprites2();
;
	jsr     _Shuffle_Sprites2
;
; Music_Update();
;
	jsr     _Music_Update
;
; if (((joypad1old & START) == 0)&&((joypad1 & START) != 0)){
;
	lda     _joypad1old
	and     #$10
	bne     L0CE9
	lda     _joypad1
	and     #$10
	beq     L0CE9
;
; Blank_sprite3();
;
	jsr     _Blank_sprite3
;
; Turn_On_Pause_Sprites();
;
	jsr     _Turn_On_Pause_Sprites
;
; Reset_Music();
;
	jsr     _Reset_Music
;
; song = 2;
;
	lda     #$02
	sta     _song
;
; Play_Music(song);
;
	jsr     _Play_Music
;
; Game_Mode = PAUSE_MODE;
;
	lda     #$02
	sta     _Game_Mode
;
; if (Victory_Flag > 0){ //wait 3 seconds
;
L0CE9:	lda     _Victory_Flag
	beq     L0CEA
;
; ++Victory_Flag;
;
	inc     _Victory_Flag
;
; if ((Frame_Count & 3) == 0){
;
	lda     _Frame_Count
	and     #$03
	bne     L0CEA
;
; ++Score3;//keep adding to the score
;
	inc     _Score3
;
; Adjust_Score();
;
	jsr     _Adjust_Score
;
; if ((Victory_Flag & 3)>1){ //flicker the screen
;
L0CEA:	lda     _Victory_Flag
	and     #$03
	cmp     #$02
	bcc     L0CEB
;
; PPU_MASK = 0xfe;//set all emphasis bits = darker
;
	lda     #$FE
	sta     $2001
;
; if (Victory_Flag >= 0xc0){ //Victory
;
L0CEB:	lda     _Victory_Flag
	cmp     #$C0
	bcc     L0CEC
;
; All_Off();
;
	jsr     _All_Off
;
; Blank_sprite3();
;
	jsr     _Blank_sprite3
;
; Turn_On_Victory_Sprites();
;
	jsr     _Turn_On_Victory_Sprites
;
; Reset_Music();
;
	jsr     _Reset_Music
;
; song = 4;
;
	lda     #$04
	sta     _song
;
; Play_Music(song);
;
	jsr     _Play_Music
;
; All_On();
;
	jsr     _All_On
;
; Game_Mode = VICTORY_MODE;
;
	lda     #$04
	sta     _Game_Mode
;
; if (Death_Flag != 0){
;
L0CEC:	lda     _Death_Flag
	beq     L0CED
;
; Blank_sprite3();
;
	jsr     _Blank_sprite3
;
; Turn_On_Game_Over_Sprites();
;
	jsr     _Turn_On_Game_Over_Sprites
;
; Reset_Music();
;
	jsr     _Reset_Music
;
; song = 3;
;
	lda     #$03
	sta     _song
;
; Play_Music(song);
;
	jsr     _Play_Music
;
; Game_Mode = GAME_OVER_MODE;
;
	lda     #$03
	sta     _Game_Mode
;
; while (Game_Mode == BOSS_MODE){ //Boss Mode
;
L0CED:	lda     _Game_Mode
	cmp     #$05
	jeq     L0CE6
;
; while (1){ //infinite loop
;
	jmp     L0CD3

.endproc

